"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@headless-tree";
exports.ids = ["vendor-chunks/@headless-tree"];
exports.modules = {

/***/ "(ssr)/./node_modules/@headless-tree/core/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@headless-tree/core/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistiveDndState: () => (/* binding */ AssistiveDndState),\n/* harmony export */   CheckedState: () => (/* binding */ CheckedState),\n/* harmony export */   DragTargetPosition: () => (/* binding */ DragTargetPosition),\n/* harmony export */   asyncDataLoaderFeature: () => (/* binding */ asyncDataLoaderFeature),\n/* harmony export */   buildProxiedInstance: () => (/* binding */ buildProxiedInstance),\n/* harmony export */   buildStaticInstance: () => (/* binding */ buildStaticInstance),\n/* harmony export */   checkboxesFeature: () => (/* binding */ checkboxesFeature),\n/* harmony export */   createOnDropHandler: () => (/* binding */ createOnDropHandler),\n/* harmony export */   createTree: () => (/* binding */ createTree),\n/* harmony export */   dragAndDropFeature: () => (/* binding */ dragAndDropFeature),\n/* harmony export */   expandAllFeature: () => (/* binding */ expandAllFeature),\n/* harmony export */   hotkeysCoreFeature: () => (/* binding */ hotkeysCoreFeature),\n/* harmony export */   insertItemsAtTarget: () => (/* binding */ insertItemsAtTarget),\n/* harmony export */   isOrderedDragTarget: () => (/* binding */ isOrderedDragTarget),\n/* harmony export */   keyboardDragAndDropFeature: () => (/* binding */ keyboardDragAndDropFeature),\n/* harmony export */   makeStateUpdater: () => (/* binding */ makeStateUpdater),\n/* harmony export */   propMemoizationFeature: () => (/* binding */ propMemoizationFeature),\n/* harmony export */   removeItemsFromParents: () => (/* binding */ removeItemsFromParents),\n/* harmony export */   renamingFeature: () => (/* binding */ renamingFeature),\n/* harmony export */   searchFeature: () => (/* binding */ searchFeature),\n/* harmony export */   selectionFeature: () => (/* binding */ selectionFeature),\n/* harmony export */   syncDataLoaderFeature: () => (/* binding */ syncDataLoaderFeature)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/utils.ts\nvar memo = (deps, fn) => {\n  let value;\n  let oldDeps = null;\n  return (...a) => {\n    const newDeps = deps(...a);\n    if (!value) {\n      value = fn(...newDeps);\n      oldDeps = newDeps;\n      return value;\n    }\n    const match = oldDeps && oldDeps.length === newDeps.length && !oldDeps.some((dep, i) => dep !== newDeps[i]);\n    if (match) {\n      return value;\n    }\n    value = fn(...newDeps);\n    oldDeps = newDeps;\n    return value;\n  };\n};\nfunction functionalUpdate(updater, input) {\n  return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction makeStateUpdater(key, instance) {\n  return (updater) => {\n    instance.setState((old) => {\n      return __spreadProps(__spreadValues({}, old), {\n        [key]: functionalUpdate(updater, old[key])\n      });\n    });\n  };\n}\nvar poll = (fn, interval = 100, timeout = 1e3) => new Promise((resolve) => {\n  let clear;\n  const i = setInterval(() => {\n    if (fn()) {\n      resolve();\n      clearInterval(i);\n      clearTimeout(clear);\n    }\n  }, interval);\n  clear = setTimeout(() => {\n    clearInterval(i);\n  }, timeout);\n});\n\n// src/utilities/errors.ts\nvar prefix = \"Headless Tree: \";\nvar throwError = (message) => Error(prefix + message);\nvar logWarning = (message) => console.warn(prefix + message);\n\n// src/features/tree/feature.ts\nvar treeFeature = {\n  key: \"tree\",\n  getInitialState: (initialState) => __spreadValues({\n    expandedItems: [],\n    focusedItem: null\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setExpandedItems: makeStateUpdater(\"expandedItems\", tree),\n    setFocusedItem: makeStateUpdater(\"focusedItem\", tree)\n  }, defaultConfig),\n  stateHandlerNames: {\n    expandedItems: \"setExpandedItems\",\n    focusedItem: \"setFocusedItem\"\n  },\n  treeInstance: {\n    getItemsMeta: ({ tree }) => {\n      const { rootItemId } = tree.getConfig();\n      const { expandedItems } = tree.getState();\n      const flatItems = [];\n      const expandedItemsSet = new Set(expandedItems);\n      const recursiveAdd = (itemId, path, level, setSize, posInSet) => {\n        var _a;\n        if (path.includes(itemId)) {\n          logWarning(`Circular reference for ${path.join(\".\")}`);\n          return;\n        }\n        flatItems.push({\n          itemId,\n          level,\n          index: flatItems.length,\n          parentId: path.at(-1),\n          setSize,\n          posInSet\n        });\n        if (expandedItemsSet.has(itemId)) {\n          const children2 = (_a = tree.retrieveChildrenIds(itemId)) != null ? _a : [];\n          let i2 = 0;\n          for (const childId of children2) {\n            recursiveAdd(\n              childId,\n              path.concat(itemId),\n              level + 1,\n              children2.length,\n              i2++\n            );\n          }\n        }\n      };\n      const children = tree.retrieveChildrenIds(rootItemId);\n      let i = 0;\n      for (const itemId of children) {\n        recursiveAdd(itemId, [rootItemId], 0, children.length, i++);\n      }\n      return flatItems;\n    },\n    getFocusedItem: ({ tree }) => {\n      var _a;\n      const focusedItemId = tree.getState().focusedItem;\n      return (_a = focusedItemId !== null ? tree.getItemInstance(focusedItemId) : null) != null ? _a : tree.getItems()[0];\n    },\n    getRootItem: ({ tree }) => {\n      const { rootItemId } = tree.getConfig();\n      return tree.getItemInstance(rootItemId);\n    },\n    focusNextItem: ({ tree }) => {\n      var _a;\n      const focused = tree.getFocusedItem().getItemMeta();\n      if (!focused) return;\n      const nextIndex = Math.min(focused.index + 1, tree.getItems().length - 1);\n      (_a = tree.getItems()[nextIndex]) == null ? void 0 : _a.setFocused();\n    },\n    focusPreviousItem: ({ tree }) => {\n      var _a;\n      const focused = tree.getFocusedItem().getItemMeta();\n      if (!focused) return;\n      const nextIndex = Math.max(focused.index - 1, 0);\n      (_a = tree.getItems()[nextIndex]) == null ? void 0 : _a.setFocused();\n    },\n    updateDomFocus: ({ tree }) => {\n      setTimeout(() => __async(null, null, function* () {\n        var _a, _b;\n        const focusedItem = tree.getFocusedItem();\n        (_b = (_a = tree.getConfig()).scrollToItem) == null ? void 0 : _b.call(_a, focusedItem);\n        yield poll(() => focusedItem.getElement() !== null, 20);\n        const focusedElement = focusedItem.getElement();\n        if (!focusedElement) return;\n        focusedElement.focus();\n      }));\n    },\n    getContainerProps: ({ prev, tree }, treeLabel) => __spreadProps(__spreadValues({}, prev == null ? void 0 : prev()), {\n      role: \"tree\",\n      \"aria-label\": treeLabel != null ? treeLabel : \"\",\n      ref: tree.registerElement\n    }),\n    // relevant for hotkeys of this feature\n    isSearchOpen: () => false\n  },\n  itemInstance: {\n    scrollTo: (_0, _1) => __async(null, [_0, _1], function* ({ tree, item }, scrollIntoViewArg) {\n      var _a, _b, _c;\n      (_b = (_a = tree.getConfig()).scrollToItem) == null ? void 0 : _b.call(_a, item);\n      yield poll(() => item.getElement() !== null, 20);\n      (_c = item.getElement()) == null ? void 0 : _c.scrollIntoView(scrollIntoViewArg);\n    }),\n    getId: ({ itemId }) => itemId,\n    getKey: ({ itemId }) => itemId,\n    // TODO apply to all stories to use\n    getProps: ({ item, prev }) => {\n      const itemMeta = item.getItemMeta();\n      return __spreadProps(__spreadValues({}, prev == null ? void 0 : prev()), {\n        ref: item.registerElement,\n        role: \"treeitem\",\n        \"aria-setsize\": itemMeta.setSize,\n        \"aria-posinset\": itemMeta.posInSet + 1,\n        \"aria-selected\": \"false\",\n        \"aria-label\": item.getItemName(),\n        \"aria-level\": itemMeta.level + 1,\n        tabIndex: item.isFocused() ? 0 : -1,\n        onClick: (e) => {\n          item.setFocused();\n          item.primaryAction();\n          if (e.ctrlKey || e.shiftKey || e.metaKey) {\n            return;\n          }\n          if (!item.isFolder()) {\n            return;\n          }\n          if (item.isExpanded()) {\n            item.collapse();\n          } else {\n            item.expand();\n          }\n        }\n      });\n    },\n    expand: ({ tree, item, itemId }) => {\n      var _a;\n      if (!item.isFolder()) {\n        return;\n      }\n      if ((_a = tree.getState().loadingItemChildrens) == null ? void 0 : _a.includes(itemId)) {\n        return;\n      }\n      tree.applySubStateUpdate(\"expandedItems\", (expandedItems) => [\n        ...expandedItems,\n        itemId\n      ]);\n      tree.rebuildTree();\n    },\n    collapse: ({ tree, item, itemId }) => {\n      if (!item.isFolder()) {\n        return;\n      }\n      tree.applySubStateUpdate(\n        \"expandedItems\",\n        (expandedItems) => expandedItems.filter((id) => id !== itemId)\n      );\n      tree.rebuildTree();\n    },\n    getItemData: ({ tree, itemId }) => tree.retrieveItemData(itemId),\n    equals: ({ item }, other) => item.getId() === (other == null ? void 0 : other.getId()),\n    isExpanded: ({ tree, itemId }) => tree.getState().expandedItems.includes(itemId),\n    isDescendentOf: ({ item }, parentId) => {\n      const parent = item.getParent();\n      return Boolean(\n        (parent == null ? void 0 : parent.getId()) === parentId || (parent == null ? void 0 : parent.isDescendentOf(parentId))\n      );\n    },\n    isFocused: ({ tree, item, itemId }) => tree.getState().focusedItem === itemId || tree.getState().focusedItem === null && item.getItemMeta().index === 0,\n    isFolder: ({ tree, item }) => item.getItemMeta().level === -1 || tree.getConfig().isItemFolder(item),\n    getItemName: ({ tree, item }) => {\n      const config = tree.getConfig();\n      return config.getItemName(item);\n    },\n    setFocused: ({ tree, itemId }) => {\n      tree.applySubStateUpdate(\"focusedItem\", itemId);\n    },\n    primaryAction: ({ tree, item }) => {\n      var _a, _b;\n      return (_b = (_a = tree.getConfig()).onPrimaryAction) == null ? void 0 : _b.call(_a, item);\n    },\n    getParent: ({ tree, item }) => item.getItemMeta().parentId ? tree.getItemInstance(item.getItemMeta().parentId) : void 0,\n    getIndexInParent: ({ item }) => item.getItemMeta().posInSet,\n    getChildren: ({ tree, itemId }) => tree.retrieveChildrenIds(itemId).map((id) => tree.getItemInstance(id)),\n    getTree: ({ tree }) => tree,\n    getItemAbove: ({ tree, item }) => tree.getItems()[item.getItemMeta().index - 1],\n    getItemBelow: ({ tree, item }) => tree.getItems()[item.getItemMeta().index + 1]\n  },\n  hotkeys: {\n    focusNextItem: {\n      hotkey: \"ArrowDown\",\n      canRepeat: true,\n      preventDefault: true,\n      isEnabled: (tree) => {\n        var _a, _b;\n        return !((_b = (_a = tree.isSearchOpen) == null ? void 0 : _a.call(tree)) != null ? _b : false) && !tree.getState().dnd;\n      },\n      // TODO what happens when the feature doesnt exist? proxy method still claims to exist\n      handler: (e, tree) => {\n        tree.focusNextItem();\n        tree.updateDomFocus();\n      }\n    },\n    focusPreviousItem: {\n      hotkey: \"ArrowUp\",\n      canRepeat: true,\n      preventDefault: true,\n      isEnabled: (tree) => {\n        var _a, _b;\n        return !((_b = (_a = tree.isSearchOpen) == null ? void 0 : _a.call(tree)) != null ? _b : false) && !tree.getState().dnd;\n      },\n      handler: (e, tree) => {\n        tree.focusPreviousItem();\n        tree.updateDomFocus();\n      }\n    },\n    expandOrDown: {\n      hotkey: \"ArrowRight\",\n      canRepeat: true,\n      handler: (e, tree) => {\n        const item = tree.getFocusedItem();\n        if (item.isExpanded() || !item.isFolder()) {\n          tree.focusNextItem();\n          tree.updateDomFocus();\n        } else {\n          item.expand();\n        }\n      }\n    },\n    collapseOrUp: {\n      hotkey: \"ArrowLeft\",\n      canRepeat: true,\n      handler: (e, tree) => {\n        var _a;\n        const item = tree.getFocusedItem();\n        if ((!item.isExpanded() || !item.isFolder()) && item.getItemMeta().level !== 0) {\n          (_a = item.getParent()) == null ? void 0 : _a.setFocused();\n          tree.updateDomFocus();\n        } else {\n          item.collapse();\n        }\n      }\n    },\n    focusFirstItem: {\n      hotkey: \"Home\",\n      handler: (e, tree) => {\n        var _a;\n        (_a = tree.getItems()[0]) == null ? void 0 : _a.setFocused();\n        tree.updateDomFocus();\n      }\n    },\n    focusLastItem: {\n      hotkey: \"End\",\n      handler: (e, tree) => {\n        var _a;\n        (_a = tree.getItems()[tree.getItems().length - 1]) == null ? void 0 : _a.setFocused();\n        tree.updateDomFocus();\n      }\n    }\n  }\n};\n\n// src/core/build-static-instance.ts\nvar buildStaticInstance = (features, instanceType, buildOpts) => {\n  const instance = {};\n  const finalize = () => {\n    const opts = buildOpts(instance);\n    featureLoop: for (let i = 0; i < features.length; i++) {\n      const definition = features[i][instanceType];\n      if (!definition) continue featureLoop;\n      methodLoop: for (const [key, method] of Object.entries(definition)) {\n        if (!method) continue methodLoop;\n        const prev = instance[key];\n        instance[key] = (...args) => {\n          return method(__spreadProps(__spreadValues({}, opts), { prev }), ...args);\n        };\n      }\n    }\n  };\n  return [instance, finalize];\n};\n\n// src/core/create-tree.ts\nvar verifyFeatures = (features) => {\n  var _a;\n  const loadedFeatures = features == null ? void 0 : features.map((feature) => feature.key);\n  for (const feature of features != null ? features : []) {\n    const missingDependency = (_a = feature.deps) == null ? void 0 : _a.find(\n      (dep) => !(loadedFeatures == null ? void 0 : loadedFeatures.includes(dep))\n    );\n    if (missingDependency) {\n      throw throwError(`${feature.key} needs ${missingDependency}`);\n    }\n  }\n};\nvar exhaustiveSort = (arr, compareFn) => {\n  const n = arr.length;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (compareFn(arr[j], arr[i]) < 0) {\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n    }\n  }\n  return arr;\n};\nvar compareFeatures = (originalOrder) => (feature1, feature2) => {\n  var _a, _b;\n  if (feature2.key && ((_a = feature1.overwrites) == null ? void 0 : _a.includes(feature2.key))) {\n    return 1;\n  }\n  if (feature1.key && ((_b = feature2.overwrites) == null ? void 0 : _b.includes(feature1.key))) {\n    return -1;\n  }\n  return originalOrder.indexOf(feature1) - originalOrder.indexOf(feature2);\n};\nvar sortFeatures = (features = []) => exhaustiveSort(features, compareFeatures(features));\nvar createTree = (initialConfig) => {\n  var _a, _b, _c, _d;\n  const buildInstance = (_a = initialConfig.instanceBuilder) != null ? _a : buildStaticInstance;\n  const additionalFeatures = [\n    treeFeature,\n    ...sortFeatures(initialConfig.features)\n  ];\n  verifyFeatures(additionalFeatures);\n  const features = [...additionalFeatures];\n  const [treeInstance, finalizeTree] = buildInstance(\n    features,\n    \"treeInstance\",\n    (tree) => ({ tree })\n  );\n  let state = additionalFeatures.reduce(\n    (acc, feature) => {\n      var _a2, _b2;\n      return (_b2 = (_a2 = feature.getInitialState) == null ? void 0 : _a2.call(feature, acc, treeInstance)) != null ? _b2 : acc;\n    },\n    (_c = (_b = initialConfig.initialState) != null ? _b : initialConfig.state) != null ? _c : {}\n  );\n  let config = additionalFeatures.reduce(\n    (acc, feature) => {\n      var _a2, _b2;\n      return (_b2 = (_a2 = feature.getDefaultConfig) == null ? void 0 : _a2.call(feature, acc, treeInstance)) != null ? _b2 : acc;\n    },\n    initialConfig\n  );\n  const stateHandlerNames = additionalFeatures.reduce(\n    (acc, feature) => __spreadValues(__spreadValues({}, acc), feature.stateHandlerNames),\n    {}\n  );\n  let treeElement;\n  const treeDataRef = { current: {} };\n  const itemInstancesMap = {};\n  let itemInstances = [];\n  const itemElementsMap = {};\n  const itemDataRefs = {};\n  let itemMetaMap = {};\n  const hotkeyPresets = {};\n  const rebuildItemMeta = () => {\n    itemInstances = [];\n    itemMetaMap = {};\n    const [rootInstance, finalizeRootInstance] = buildInstance(\n      features,\n      \"itemInstance\",\n      (item) => ({ item, tree: treeInstance, itemId: config.rootItemId })\n    );\n    finalizeRootInstance();\n    itemInstancesMap[config.rootItemId] = rootInstance;\n    itemMetaMap[config.rootItemId] = {\n      itemId: config.rootItemId,\n      index: -1,\n      parentId: null,\n      level: -1,\n      posInSet: 0,\n      setSize: 1\n    };\n    for (const item of treeInstance.getItemsMeta()) {\n      itemMetaMap[item.itemId] = item;\n      if (!itemInstancesMap[item.itemId]) {\n        const [instance, finalizeInstance] = buildInstance(\n          features,\n          \"itemInstance\",\n          (instance2) => ({\n            item: instance2,\n            tree: treeInstance,\n            itemId: item.itemId\n          })\n        );\n        finalizeInstance();\n        itemInstancesMap[item.itemId] = instance;\n        itemInstances.push(instance);\n      } else {\n        itemInstances.push(itemInstancesMap[item.itemId]);\n      }\n    }\n  };\n  const eachFeature = (fn) => {\n    for (const feature of additionalFeatures) {\n      fn(feature);\n    }\n  };\n  const mainFeature = {\n    key: \"main\",\n    treeInstance: {\n      getState: () => state,\n      setState: ({}, updater) => {\n        var _a2;\n        (_a2 = config.setState) == null ? void 0 : _a2.call(config, state);\n      },\n      applySubStateUpdate: ({}, stateName, updater) => {\n        state[stateName] = typeof updater === \"function\" ? updater(state[stateName]) : updater;\n        const externalStateSetter = config[stateHandlerNames[stateName]];\n        externalStateSetter == null ? void 0 : externalStateSetter(state[stateName]);\n      },\n      // TODO rebuildSubTree: (itemId: string) => void;\n      rebuildTree: () => {\n        var _a2;\n        rebuildItemMeta();\n        (_a2 = config.setState) == null ? void 0 : _a2.call(config, state);\n      },\n      getConfig: () => config,\n      setConfig: (_, updater) => {\n        var _a2, _b2, _c2;\n        const newConfig = typeof updater === \"function\" ? updater(config) : updater;\n        const hasChangedExpandedItems = ((_a2 = newConfig.state) == null ? void 0 : _a2.expandedItems) && ((_b2 = newConfig.state) == null ? void 0 : _b2.expandedItems) !== state.expandedItems;\n        config = newConfig;\n        if (newConfig.state) {\n          state = __spreadValues(__spreadValues({}, state), newConfig.state);\n        }\n        if (hasChangedExpandedItems) {\n          rebuildItemMeta();\n          (_c2 = config.setState) == null ? void 0 : _c2.call(config, state);\n        }\n      },\n      getItemInstance: ({}, itemId) => {\n        const existingInstance = itemInstancesMap[itemId];\n        if (!existingInstance) {\n          const [instance, finalizeInstance] = buildInstance(\n            features,\n            \"itemInstance\",\n            (instance2) => ({\n              item: instance2,\n              tree: treeInstance,\n              itemId\n            })\n          );\n          finalizeInstance();\n          return instance;\n        }\n        return existingInstance;\n      },\n      getItems: () => itemInstances,\n      registerElement: ({}, element) => {\n        if (treeElement === element) {\n          return;\n        }\n        if (treeElement && !element) {\n          eachFeature(\n            (feature) => {\n              var _a2;\n              return (_a2 = feature.onTreeUnmount) == null ? void 0 : _a2.call(feature, treeInstance, treeElement);\n            }\n          );\n        } else if (!treeElement && element) {\n          eachFeature(\n            (feature) => {\n              var _a2;\n              return (_a2 = feature.onTreeMount) == null ? void 0 : _a2.call(feature, treeInstance, element);\n            }\n          );\n        }\n        treeElement = element;\n      },\n      getElement: () => treeElement,\n      getDataRef: () => treeDataRef,\n      getHotkeyPresets: () => hotkeyPresets\n    },\n    itemInstance: {\n      registerElement: ({ itemId, item }, element) => {\n        if (itemElementsMap[itemId] === element) {\n          return;\n        }\n        const oldElement = itemElementsMap[itemId];\n        if (oldElement && !element) {\n          eachFeature(\n            (feature) => {\n              var _a2;\n              return (_a2 = feature.onItemUnmount) == null ? void 0 : _a2.call(feature, item, oldElement, treeInstance);\n            }\n          );\n        } else if (!oldElement && element) {\n          eachFeature(\n            (feature) => {\n              var _a2;\n              return (_a2 = feature.onItemMount) == null ? void 0 : _a2.call(feature, item, element, treeInstance);\n            }\n          );\n        }\n        itemElementsMap[itemId] = element;\n      },\n      getElement: ({ itemId }) => itemElementsMap[itemId],\n      // eslint-disable-next-line no-return-assign\n      getDataRef: ({ itemId }) => {\n        var _a2;\n        return (_a2 = itemDataRefs[itemId]) != null ? _a2 : itemDataRefs[itemId] = { current: {} };\n      },\n      getItemMeta: ({ itemId }) => {\n        var _a2;\n        return (_a2 = itemMetaMap[itemId]) != null ? _a2 : {\n          itemId,\n          parentId: null,\n          level: -1,\n          index: -1,\n          posInSet: 0,\n          setSize: 1\n        };\n      }\n    }\n  };\n  features.unshift(mainFeature);\n  for (const feature of features) {\n    Object.assign(hotkeyPresets, (_d = feature.hotkeys) != null ? _d : {});\n  }\n  finalizeTree();\n  return treeInstance;\n};\n\n// src/features/drag-and-drop/types.ts\nvar DragTargetPosition = /* @__PURE__ */ ((DragTargetPosition2) => {\n  DragTargetPosition2[\"Top\"] = \"top\";\n  DragTargetPosition2[\"Bottom\"] = \"bottom\";\n  DragTargetPosition2[\"Item\"] = \"item\";\n  return DragTargetPosition2;\n})(DragTargetPosition || {});\n\n// src/features/keyboard-drag-and-drop/types.ts\nvar AssistiveDndState = /* @__PURE__ */ ((AssistiveDndState2) => {\n  AssistiveDndState2[AssistiveDndState2[\"None\"] = 0] = \"None\";\n  AssistiveDndState2[AssistiveDndState2[\"Started\"] = 1] = \"Started\";\n  AssistiveDndState2[AssistiveDndState2[\"Dragging\"] = 2] = \"Dragging\";\n  AssistiveDndState2[AssistiveDndState2[\"Completed\"] = 3] = \"Completed\";\n  AssistiveDndState2[AssistiveDndState2[\"Aborted\"] = 4] = \"Aborted\";\n  return AssistiveDndState2;\n})(AssistiveDndState || {});\n\n// src/features/checkboxes/types.ts\nvar CheckedState = /* @__PURE__ */ ((CheckedState2) => {\n  CheckedState2[\"Checked\"] = \"checked\";\n  CheckedState2[\"Unchecked\"] = \"unchecked\";\n  CheckedState2[\"Indeterminate\"] = \"indeterminate\";\n  return CheckedState2;\n})(CheckedState || {});\n\n// src/features/selection/feature.ts\nvar selectionFeature = {\n  key: \"selection\",\n  getInitialState: (initialState) => __spreadValues({\n    selectedItems: []\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setSelectedItems: makeStateUpdater(\"selectedItems\", tree)\n  }, defaultConfig),\n  stateHandlerNames: {\n    selectedItems: \"setSelectedItems\"\n  },\n  treeInstance: {\n    setSelectedItems: ({ tree }, selectedItems) => {\n      tree.applySubStateUpdate(\"selectedItems\", selectedItems);\n    },\n    getSelectedItems: ({ tree }) => {\n      return tree.getState().selectedItems.map(tree.getItemInstance);\n    }\n  },\n  itemInstance: {\n    select: ({ tree, itemId }) => {\n      const { selectedItems } = tree.getState();\n      tree.setSelectedItems(\n        selectedItems.includes(itemId) ? selectedItems : [...selectedItems, itemId]\n      );\n    },\n    deselect: ({ tree, itemId }) => {\n      const { selectedItems } = tree.getState();\n      tree.setSelectedItems(selectedItems.filter((id) => id !== itemId));\n    },\n    isSelected: ({ tree, itemId }) => {\n      const { selectedItems } = tree.getState();\n      return selectedItems.includes(itemId);\n    },\n    selectUpTo: ({ tree, item }, ctrl) => {\n      const indexA = item.getItemMeta().index;\n      const indexB = tree.getFocusedItem().getItemMeta().index;\n      const [a, b] = indexA < indexB ? [indexA, indexB] : [indexB, indexA];\n      const newSelectedItems = tree.getItems().slice(a, b + 1).map((treeItem) => treeItem.getItemMeta().itemId);\n      if (!ctrl) {\n        tree.setSelectedItems(newSelectedItems);\n        return;\n      }\n      const { selectedItems } = tree.getState();\n      const uniqueSelectedItems = [\n        .../* @__PURE__ */ new Set([...selectedItems, ...newSelectedItems])\n      ];\n      tree.setSelectedItems(uniqueSelectedItems);\n    },\n    toggleSelect: ({ item }) => {\n      if (item.isSelected()) {\n        item.deselect();\n      } else {\n        item.select();\n      }\n    },\n    getProps: ({ tree, item, prev }) => __spreadProps(__spreadValues({}, prev == null ? void 0 : prev()), {\n      \"aria-selected\": item.isSelected() ? \"true\" : \"false\",\n      onClick: (e) => {\n        var _a, _b;\n        if (e.shiftKey) {\n          item.selectUpTo(e.ctrlKey || e.metaKey);\n        } else if (e.ctrlKey || e.metaKey) {\n          item.toggleSelect();\n        } else {\n          tree.setSelectedItems([item.getItemMeta().itemId]);\n        }\n        (_b = (_a = prev == null ? void 0 : prev()) == null ? void 0 : _a.onClick) == null ? void 0 : _b.call(_a, e);\n      }\n    })\n  },\n  hotkeys: {\n    // setSelectedItem: {\n    //   hotkey: \"space\",\n    //   handler: (e, tree) => {\n    //     tree.setSelectedItems([tree.getFocusedItem().getId()]);\n    //   },\n    // },\n    toggleSelectedItem: {\n      hotkey: \"Control+Space\",\n      preventDefault: true,\n      handler: (_, tree) => {\n        tree.getFocusedItem().toggleSelect();\n      }\n    },\n    selectUpwards: {\n      hotkey: \"Shift+ArrowUp\",\n      handler: (e, tree) => {\n        const focused = tree.getFocusedItem();\n        const above = focused.getItemAbove();\n        if (!above) return;\n        if (focused.isSelected() && above.isSelected()) {\n          focused.deselect();\n        } else {\n          above.select();\n        }\n        above.setFocused();\n        tree.updateDomFocus();\n      }\n    },\n    selectDownwards: {\n      hotkey: \"Shift+ArrowDown\",\n      handler: (e, tree) => {\n        const focused = tree.getFocusedItem();\n        const below = focused.getItemBelow();\n        if (!below) return;\n        if (focused.isSelected() && below.isSelected()) {\n          focused.deselect();\n        } else {\n          below.select();\n        }\n        below.setFocused();\n        tree.updateDomFocus();\n      }\n    },\n    selectAll: {\n      hotkey: \"Control+KeyA\",\n      preventDefault: true,\n      handler: (e, tree) => {\n        tree.setSelectedItems(tree.getItems().map((item) => item.getId()));\n      }\n    }\n  }\n};\n\n// src/features/checkboxes/feature.ts\nvar getAllLoadedDescendants = (tree, itemId, includeFolders = false) => {\n  if (!tree.getConfig().isItemFolder(tree.getItemInstance(itemId))) {\n    return [itemId];\n  }\n  const descendants = tree.retrieveChildrenIds(itemId).map((child) => getAllLoadedDescendants(tree, child, includeFolders)).flat();\n  return includeFolders ? [itemId, ...descendants] : descendants;\n};\nvar checkboxesFeature = {\n  key: \"checkboxes\",\n  overwrites: [\"selection\"],\n  getInitialState: (initialState) => __spreadValues({\n    checkedItems: []\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => {\n    var _a, _b, _c;\n    const hasAsyncLoader = (_a = defaultConfig.features) == null ? void 0 : _a.some(\n      (f) => f.key === \"async-data-loader\"\n    );\n    if (hasAsyncLoader && defaultConfig.propagateCheckedState) {\n      throwError(`propagateCheckedState not supported with async trees`);\n    }\n    const propagateCheckedState = (_b = defaultConfig.propagateCheckedState) != null ? _b : !hasAsyncLoader;\n    const canCheckFolders = (_c = defaultConfig.canCheckFolders) != null ? _c : !propagateCheckedState;\n    return __spreadValues({\n      setCheckedItems: makeStateUpdater(\"checkedItems\", tree),\n      propagateCheckedState,\n      canCheckFolders\n    }, defaultConfig);\n  },\n  stateHandlerNames: {\n    checkedItems: \"setCheckedItems\"\n  },\n  treeInstance: {\n    setCheckedItems: ({ tree }, checkedItems) => {\n      tree.applySubStateUpdate(\"checkedItems\", checkedItems);\n    }\n  },\n  itemInstance: {\n    getCheckboxProps: ({ item }) => {\n      const checkedState = item.getCheckedState();\n      return {\n        onChange: item.toggleCheckedState,\n        checked: checkedState === \"checked\" /* Checked */,\n        ref: (r) => {\n          if (r) {\n            r.indeterminate = checkedState === \"indeterminate\" /* Indeterminate */;\n          }\n        }\n      };\n    },\n    toggleCheckedState: ({ item }) => {\n      if (item.getCheckedState() === \"checked\" /* Checked */) {\n        item.setUnchecked();\n      } else {\n        item.setChecked();\n      }\n    },\n    getCheckedState: ({ item, tree }) => {\n      const { checkedItems } = tree.getState();\n      const { propagateCheckedState } = tree.getConfig();\n      const itemId = item.getId();\n      if (checkedItems.includes(itemId)) {\n        return \"checked\" /* Checked */;\n      }\n      if (item.isFolder() && propagateCheckedState) {\n        const descendants = getAllLoadedDescendants(tree, itemId);\n        if (descendants.every((d) => checkedItems.includes(d))) {\n          return \"checked\" /* Checked */;\n        }\n        if (descendants.some((d) => checkedItems.includes(d))) {\n          return \"indeterminate\" /* Indeterminate */;\n        }\n      }\n      return \"unchecked\" /* Unchecked */;\n    },\n    setChecked: ({ item, tree, itemId }) => {\n      const { propagateCheckedState, canCheckFolders } = tree.getConfig();\n      if (item.isFolder() && propagateCheckedState) {\n        tree.applySubStateUpdate(\"checkedItems\", (items) => [\n          ...items,\n          ...getAllLoadedDescendants(tree, itemId, canCheckFolders)\n        ]);\n      } else if (!item.isFolder() || canCheckFolders) {\n        tree.applySubStateUpdate(\"checkedItems\", (items) => [...items, itemId]);\n      }\n    },\n    setUnchecked: ({ item, tree, itemId }) => {\n      const { propagateCheckedState, canCheckFolders } = tree.getConfig();\n      if (item.isFolder() && propagateCheckedState) {\n        const descendants = getAllLoadedDescendants(\n          tree,\n          itemId,\n          canCheckFolders\n        );\n        tree.applySubStateUpdate(\n          \"checkedItems\",\n          (items) => items.filter((id) => !descendants.includes(id) && id !== itemId)\n        );\n      } else {\n        tree.applySubStateUpdate(\n          \"checkedItems\",\n          (items) => items.filter((id) => id !== itemId)\n        );\n      }\n    }\n  }\n};\n\n// src/features/hotkeys-core/feature.ts\nvar specialKeys = {\n  // TODO:breaking deprecate auto-lowercase\n  letter: /^Key[A-Z]$/,\n  letterornumber: /^(Key[A-Z]|Digit[0-9])$/,\n  plus: /^(NumpadAdd|Plus)$/,\n  minus: /^(NumpadSubtract|Minus)$/,\n  control: /^(ControlLeft|ControlRight)$/,\n  shift: /^(ShiftLeft|ShiftRight)$/\n};\nvar testHotkeyMatch = (pressedKeys, tree, hotkey) => {\n  const supposedKeys = hotkey.hotkey.toLowerCase().split(\"+\");\n  const doKeysMatch = supposedKeys.every((key) => {\n    if (key in specialKeys) {\n      return [...pressedKeys].some(\n        (pressedKey) => specialKeys[key].test(pressedKey)\n      );\n    }\n    const pressedKeysLowerCase = [...pressedKeys].map((k) => k.toLowerCase());\n    if (pressedKeysLowerCase.includes(key.toLowerCase())) {\n      return true;\n    }\n    if (pressedKeysLowerCase.includes(`key${key.toLowerCase()}`)) {\n      return true;\n    }\n    return false;\n  });\n  const isEnabled = !hotkey.isEnabled || hotkey.isEnabled(tree);\n  const equalCounts = pressedKeys.size === supposedKeys.length;\n  return doKeysMatch && isEnabled && equalCounts;\n};\nvar findHotkeyMatch = (pressedKeys, tree, config1, config2) => {\n  var _a;\n  return (_a = Object.entries(__spreadValues(__spreadValues({}, config1), config2)).find(\n    ([, hotkey]) => testHotkeyMatch(pressedKeys, tree, hotkey)\n  )) == null ? void 0 : _a[0];\n};\nvar hotkeysCoreFeature = {\n  key: \"hotkeys-core\",\n  onTreeMount: (tree, element) => {\n    const data = tree.getDataRef();\n    const keydown = (e) => {\n      var _a, _b;\n      const { ignoreHotkeysOnInputs, onTreeHotkey, hotkeys } = tree.getConfig();\n      if (e.target instanceof HTMLInputElement && ignoreHotkeysOnInputs) {\n        return;\n      }\n      (_b = (_a = data.current).pressedKeys) != null ? _b : _a.pressedKeys = /* @__PURE__ */ new Set();\n      const newMatch = !data.current.pressedKeys.has(e.code);\n      data.current.pressedKeys.add(e.code);\n      const hotkeyName = findHotkeyMatch(\n        data.current.pressedKeys,\n        tree,\n        tree.getHotkeyPresets(),\n        hotkeys\n      );\n      if (e.target instanceof HTMLInputElement) {\n        data.current.pressedKeys.delete(e.code);\n      }\n      if (!hotkeyName) return;\n      const hotkeyConfig = __spreadValues(__spreadValues({}, tree.getHotkeyPresets()[hotkeyName]), hotkeys == null ? void 0 : hotkeys[hotkeyName]);\n      if (!hotkeyConfig) return;\n      if (!hotkeyConfig.allowWhenInputFocused && e.target instanceof HTMLInputElement)\n        return;\n      if (!hotkeyConfig.canRepeat && !newMatch) return;\n      if (hotkeyConfig.preventDefault) e.preventDefault();\n      hotkeyConfig.handler(e, tree);\n      onTreeHotkey == null ? void 0 : onTreeHotkey(hotkeyName, e);\n    };\n    const keyup = (e) => {\n      var _a, _b;\n      (_b = (_a = data.current).pressedKeys) != null ? _b : _a.pressedKeys = /* @__PURE__ */ new Set();\n      data.current.pressedKeys.delete(e.code);\n    };\n    const reset = () => {\n      data.current.pressedKeys = /* @__PURE__ */ new Set();\n    };\n    element.addEventListener(\"keydown\", keydown);\n    document.addEventListener(\"keyup\", keyup);\n    window.addEventListener(\"focus\", reset);\n    data.current.keydownHandler = keydown;\n    data.current.keyupHandler = keyup;\n    data.current.resetHandler = reset;\n  },\n  onTreeUnmount: (tree, element) => {\n    const data = tree.getDataRef();\n    if (data.current.keyupHandler) {\n      document.removeEventListener(\"keyup\", data.current.keyupHandler);\n      delete data.current.keyupHandler;\n    }\n    if (data.current.keydownHandler) {\n      element.removeEventListener(\"keydown\", data.current.keydownHandler);\n      delete data.current.keydownHandler;\n    }\n    if (data.current.resetHandler) {\n      window.removeEventListener(\"focus\", data.current.resetHandler);\n      delete data.current.resetHandler;\n    }\n  }\n};\n\n// src/features/async-data-loader/feature.ts\nvar getDataRef = (tree) => {\n  var _a, _b, _c, _d;\n  const dataRef = tree.getDataRef();\n  (_b = (_a = dataRef.current).itemData) != null ? _b : _a.itemData = {};\n  (_d = (_c = dataRef.current).childrenIds) != null ? _d : _c.childrenIds = {};\n  return dataRef;\n};\nvar loadItemData = (tree, itemId) => __async(null, null, function* () {\n  var _a;\n  const config = tree.getConfig();\n  const dataRef = getDataRef(tree);\n  const item = yield config.dataLoader.getItem(itemId);\n  dataRef.current.itemData[itemId] = item;\n  (_a = config.onLoadedItem) == null ? void 0 : _a.call(config, itemId, item);\n  tree.applySubStateUpdate(\n    \"loadingItemData\",\n    (loadingItemData) => loadingItemData.filter((id) => id !== itemId)\n  );\n  return item;\n});\nvar loadChildrenIds = (tree, itemId) => __async(null, null, function* () {\n  var _a, _b;\n  const config = tree.getConfig();\n  const dataRef = getDataRef(tree);\n  let childrenIds;\n  if (\"getChildrenWithData\" in config.dataLoader) {\n    const children = yield config.dataLoader.getChildrenWithData(itemId);\n    childrenIds = children.map((c) => c.id);\n    dataRef.current.childrenIds[itemId] = childrenIds;\n    children.forEach(({ id, data }) => {\n      var _a2;\n      dataRef.current.itemData[id] = data;\n      (_a2 = config.onLoadedItem) == null ? void 0 : _a2.call(config, id, data);\n    });\n    (_a = config.onLoadedChildren) == null ? void 0 : _a.call(config, itemId, childrenIds);\n    tree.rebuildTree();\n    tree.applySubStateUpdate(\n      \"loadingItemData\",\n      (loadingItemData) => loadingItemData.filter((id) => !childrenIds.includes(id))\n    );\n  } else {\n    childrenIds = yield config.dataLoader.getChildren(itemId);\n    dataRef.current.childrenIds[itemId] = childrenIds;\n    (_b = config.onLoadedChildren) == null ? void 0 : _b.call(config, itemId, childrenIds);\n    tree.rebuildTree();\n  }\n  tree.applySubStateUpdate(\n    \"loadingItemChildrens\",\n    (loadingItemChildrens) => loadingItemChildrens.filter((id) => id !== itemId)\n  );\n  return childrenIds;\n});\nvar asyncDataLoaderFeature = {\n  key: \"async-data-loader\",\n  getInitialState: (initialState) => __spreadValues({\n    loadingItemData: [],\n    loadingItemChildrens: []\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setLoadingItemData: makeStateUpdater(\"loadingItemData\", tree),\n    setLoadingItemChildrens: makeStateUpdater(\"loadingItemChildrens\", tree)\n  }, defaultConfig),\n  stateHandlerNames: {\n    loadingItemData: \"setLoadingItemData\",\n    loadingItemChildrens: \"setLoadingItemChildrens\"\n  },\n  treeInstance: {\n    waitForItemDataLoaded: ({ tree }, itemId) => tree.loadItemData(itemId),\n    waitForItemChildrenLoaded: ({ tree }, itemId) => tree.loadChildrenIds(itemId),\n    loadItemData: (_0, _1) => __async(null, [_0, _1], function* ({ tree }, itemId) {\n      var _a;\n      return (_a = getDataRef(tree).current.itemData[itemId]) != null ? _a : yield loadItemData(tree, itemId);\n    }),\n    loadChildrenIds: (_0, _1) => __async(null, [_0, _1], function* ({ tree }, itemId) {\n      var _a;\n      return (_a = getDataRef(tree).current.childrenIds[itemId]) != null ? _a : yield loadChildrenIds(tree, itemId);\n    }),\n    retrieveItemData: ({ tree }, itemId, skipFetch = false) => {\n      var _a, _b;\n      const config = tree.getConfig();\n      const dataRef = getDataRef(tree);\n      if (dataRef.current.itemData[itemId]) {\n        return dataRef.current.itemData[itemId];\n      }\n      if (!tree.getState().loadingItemData.includes(itemId) && !skipFetch) {\n        tree.applySubStateUpdate(\"loadingItemData\", (loadingItemData) => [\n          ...loadingItemData,\n          itemId\n        ]);\n        loadItemData(tree, itemId);\n      }\n      return (_b = (_a = config.createLoadingItemData) == null ? void 0 : _a.call(config)) != null ? _b : null;\n    },\n    retrieveChildrenIds: ({ tree }, itemId, skipFetch = false) => {\n      const dataRef = getDataRef(tree);\n      if (dataRef.current.childrenIds[itemId]) {\n        return dataRef.current.childrenIds[itemId];\n      }\n      if (tree.getState().loadingItemChildrens.includes(itemId) || skipFetch) {\n        return [];\n      }\n      tree.applySubStateUpdate(\n        \"loadingItemChildrens\",\n        (loadingItemChildrens) => [...loadingItemChildrens, itemId]\n      );\n      loadChildrenIds(tree, itemId);\n      return [];\n    }\n  },\n  itemInstance: {\n    isLoading: ({ tree, item }) => tree.getState().loadingItemData.includes(item.getItemMeta().itemId) || tree.getState().loadingItemChildrens.includes(item.getItemMeta().itemId),\n    invalidateItemData: (_0, _1) => __async(null, [_0, _1], function* ({ tree, itemId }, optimistic) {\n      var _a;\n      if (!optimistic) {\n        (_a = getDataRef(tree).current.itemData) == null ? true : delete _a[itemId];\n        tree.applySubStateUpdate(\"loadingItemData\", (loadingItemData) => [\n          ...loadingItemData,\n          itemId\n        ]);\n      }\n      yield loadItemData(tree, itemId);\n    }),\n    invalidateChildrenIds: (_0, _1) => __async(null, [_0, _1], function* ({ tree, itemId }, optimistic) {\n      var _a;\n      if (!optimistic) {\n        (_a = getDataRef(tree).current.childrenIds) == null ? true : delete _a[itemId];\n        tree.applySubStateUpdate(\n          \"loadingItemChildrens\",\n          (loadingItemChildrens) => [...loadingItemChildrens, itemId]\n        );\n      }\n      yield loadChildrenIds(tree, itemId);\n    }),\n    updateCachedChildrenIds: ({ tree, itemId }, childrenIds) => {\n      const dataRef = tree.getDataRef();\n      dataRef.current.childrenIds[itemId] = childrenIds;\n      tree.rebuildTree();\n    },\n    updateCachedData: ({ tree, itemId }, data) => {\n      const dataRef = tree.getDataRef();\n      dataRef.current.itemData[itemId] = data;\n      tree.rebuildTree();\n    }\n  }\n};\n\n// src/features/sync-data-loader/feature.ts\nvar undefErrorMessage = \"sync dataLoader returned undefined\";\nvar promiseErrorMessage = \"sync dataLoader returned promise\";\nvar unpromise = (data) => {\n  if (!data) {\n    throw throwError(undefErrorMessage);\n  }\n  if (typeof data === \"object\" && \"then\" in data) {\n    throw throwError(promiseErrorMessage);\n  }\n  return data;\n};\nvar syncDataLoaderFeature = {\n  key: \"sync-data-loader\",\n  getInitialState: (initialState) => __spreadValues({\n    loadingItemData: [],\n    loadingItemChildrens: []\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setLoadingItemData: makeStateUpdater(\"loadingItemData\", tree),\n    setLoadingItemChildrens: makeStateUpdater(\"loadingItemChildrens\", tree)\n  }, defaultConfig),\n  stateHandlerNames: {\n    loadingItemData: \"setLoadingItemData\",\n    loadingItemChildrens: \"setLoadingItemChildrens\"\n  },\n  treeInstance: {\n    waitForItemDataLoaded: () => __async(null, null, function* () {\n    }),\n    waitForItemChildrenLoaded: () => __async(null, null, function* () {\n    }),\n    retrieveItemData: ({ tree }, itemId) => {\n      return unpromise(tree.getConfig().dataLoader.getItem(itemId));\n    },\n    retrieveChildrenIds: ({ tree }, itemId) => {\n      const { dataLoader } = tree.getConfig();\n      if (\"getChildren\" in dataLoader) {\n        return unpromise(dataLoader.getChildren(itemId));\n      }\n      return unpromise(dataLoader.getChildrenWithData(itemId)).map(\n        (c) => c.data\n      );\n    },\n    loadItemData: ({ tree }, itemId) => tree.retrieveItemData(itemId),\n    loadChildrenIds: ({ tree }, itemId) => tree.retrieveChildrenIds(itemId)\n  },\n  itemInstance: {\n    isLoading: () => false\n  }\n};\n\n// src/features/drag-and-drop/utils.ts\nvar isOrderedDragTarget = (dragTarget) => \"childIndex\" in dragTarget;\nvar canDrop = (dataTransfer, target, tree) => {\n  var _a, _b, _c;\n  const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n  const config = tree.getConfig();\n  if (draggedItems && !((_c = (_b = config.canDrop) == null ? void 0 : _b.call(config, draggedItems, target)) != null ? _c : true)) {\n    return false;\n  }\n  if (draggedItems && draggedItems.some(\n    (draggedItem) => target.item.getId() === draggedItem.getId() || target.item.isDescendentOf(draggedItem.getId())\n  )) {\n    return false;\n  }\n  if (!draggedItems && dataTransfer && config.canDropForeignDragObject && !config.canDropForeignDragObject(dataTransfer, target)) {\n    return false;\n  }\n  return true;\n};\nvar getItemDropCategory = (item) => {\n  if (item.isExpanded()) {\n    return 1 /* ExpandedFolder */;\n  }\n  const parent = item.getParent();\n  if (parent && item.getIndexInParent() === item.getItemMeta().setSize - 1) {\n    return 2 /* LastInGroup */;\n  }\n  return 0 /* Item */;\n};\nvar getInsertionIndex = (children, childIndex, draggedItems) => {\n  var _a;\n  const numberOfDragItemsBeforeTarget = (_a = children.slice(0, childIndex).reduce(\n    (counter, child) => child && (draggedItems == null ? void 0 : draggedItems.some((i) => i.getId() === child.getId())) ? ++counter : counter,\n    0\n  )) != null ? _a : 0;\n  return childIndex - numberOfDragItemsBeforeTarget;\n};\nvar getTargetPlacement = (e, item, tree, canMakeChild) => {\n  var _a, _b, _c, _d, _e;\n  const config = tree.getConfig();\n  if (!config.canReorder) {\n    return canMakeChild ? { type: 2 /* MakeChild */ } : { type: 1 /* ReorderBelow */ };\n  }\n  const bb = (_a = item.getElement()) == null ? void 0 : _a.getBoundingClientRect();\n  const topPercent = bb ? (e.clientY - bb.top) / bb.height : 0.5;\n  const leftPixels = bb ? e.clientX - bb.left : 0;\n  const targetDropCategory = getItemDropCategory(item);\n  const reorderAreaPercentage = !canMakeChild ? 0.5 : (_b = config.reorderAreaPercentage) != null ? _b : 0.3;\n  const indent = (_c = config.indent) != null ? _c : 20;\n  const makeChildType = canMakeChild ? 2 /* MakeChild */ : 1 /* ReorderBelow */;\n  if (targetDropCategory === 1 /* ExpandedFolder */) {\n    if (topPercent < reorderAreaPercentage) {\n      return { type: 0 /* ReorderAbove */ };\n    }\n    return { type: makeChildType };\n  }\n  if (targetDropCategory === 2 /* LastInGroup */) {\n    if (leftPixels < item.getItemMeta().level * indent) {\n      if (topPercent < 0.5) {\n        return { type: 0 /* ReorderAbove */ };\n      }\n      const minLevel = (_e = (_d = item.getItemBelow()) == null ? void 0 : _d.getItemMeta().level) != null ? _e : 0;\n      return {\n        type: 3 /* Reparent */,\n        reparentLevel: Math.max(minLevel, Math.floor(leftPixels / indent))\n      };\n    }\n  }\n  if (topPercent < reorderAreaPercentage) {\n    return { type: 0 /* ReorderAbove */ };\n  }\n  if (topPercent > 1 - reorderAreaPercentage) {\n    return { type: 1 /* ReorderBelow */ };\n  }\n  return { type: makeChildType };\n};\nvar getDragCode = (item, placement) => {\n  return [\n    item.getId(),\n    placement.type,\n    placement.type === 3 /* Reparent */ ? placement.reparentLevel : 0\n  ].join(\"__\");\n};\nvar getNthParent = (item, n) => {\n  if (n === item.getItemMeta().level) {\n    return item;\n  }\n  return getNthParent(item.getParent(), n);\n};\nvar getReparentTarget = (item, reparentLevel, draggedItems) => {\n  const itemMeta = item.getItemMeta();\n  const reparentedTarget = getNthParent(item, reparentLevel - 1);\n  const targetItemAbove = getNthParent(item, reparentLevel);\n  const targetIndex = targetItemAbove.getIndexInParent() + 1;\n  return {\n    item: reparentedTarget,\n    childIndex: targetIndex,\n    insertionIndex: getInsertionIndex(\n      reparentedTarget.getChildren(),\n      targetIndex,\n      draggedItems\n    ),\n    dragLineIndex: itemMeta.index + 1,\n    dragLineLevel: reparentLevel\n  };\n};\nvar getDragTarget = (e, item, tree, canReorder = tree.getConfig().canReorder) => {\n  var _a;\n  const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n  const itemMeta = item.getItemMeta();\n  const parent = item.getParent();\n  const itemTarget = { item };\n  const parentTarget = parent ? { item: parent } : null;\n  const canBecomeSibling = parentTarget && canDrop(e.dataTransfer, parentTarget, tree);\n  const canMakeChild = canDrop(e.dataTransfer, itemTarget, tree);\n  const placement = getTargetPlacement(e, item, tree, canMakeChild);\n  if (!canReorder && parent && canBecomeSibling && placement.type !== 2 /* MakeChild */) {\n    if (draggedItems == null ? void 0 : draggedItems.some((item2) => item2.isDescendentOf(parent.getId()))) {\n      return itemTarget;\n    }\n    return parentTarget;\n  }\n  if (!canReorder && parent && !canBecomeSibling) {\n    return getDragTarget(e, parent, tree, false);\n  }\n  if (!parent) {\n    return itemTarget;\n  }\n  if (placement.type === 2 /* MakeChild */) {\n    return itemTarget;\n  }\n  if (!canBecomeSibling) {\n    return getDragTarget(e, parent, tree, false);\n  }\n  if (placement.type === 3 /* Reparent */) {\n    return getReparentTarget(item, placement.reparentLevel, draggedItems);\n  }\n  const maybeAddOneForBelow = placement.type === 0 /* ReorderAbove */ ? 0 : 1;\n  const childIndex = item.getIndexInParent() + maybeAddOneForBelow;\n  return {\n    item: parent,\n    dragLineIndex: itemMeta.index + maybeAddOneForBelow,\n    dragLineLevel: itemMeta.level,\n    childIndex,\n    // TODO performance could be improved by computing this only when dragcode changed\n    insertionIndex: getInsertionIndex(\n      parent.getChildren(),\n      childIndex,\n      draggedItems\n    )\n  };\n};\n\n// src/features/drag-and-drop/feature.ts\nvar handleAutoOpenFolder = (dataRef, tree, item, placement) => {\n  const { openOnDropDelay } = tree.getConfig();\n  const dragCode = dataRef.current.lastDragCode;\n  if (!openOnDropDelay || !item.isFolder() || item.isExpanded() || placement.type !== 2 /* MakeChild */) {\n    return;\n  }\n  clearTimeout(dataRef.current.autoExpandTimeout);\n  dataRef.current.autoExpandTimeout = setTimeout(() => {\n    if (dragCode !== dataRef.current.lastDragCode || !dataRef.current.lastAllowDrop)\n      return;\n    item.expand();\n  }, openOnDropDelay);\n};\nvar defaultCanDropForeignDragObject = () => false;\nvar dragAndDropFeature = {\n  key: \"drag-and-drop\",\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    canDrop: (_, target) => target.item.isFolder(),\n    canDropForeignDragObject: defaultCanDropForeignDragObject,\n    canDragForeignDragObjectOver: defaultConfig.canDropForeignDragObject !== defaultCanDropForeignDragObject ? (dataTransfer) => dataTransfer.effectAllowed !== \"none\" : () => false,\n    setDndState: makeStateUpdater(\"dnd\", tree),\n    canReorder: true,\n    openOnDropDelay: 800\n  }, defaultConfig),\n  stateHandlerNames: {\n    dnd: \"setDndState\"\n  },\n  onTreeMount: (tree) => {\n    const listener = () => {\n      tree.applySubStateUpdate(\"dnd\", null);\n    };\n    tree.getDataRef().current.windowDragEndListener = listener;\n    window.addEventListener(\"dragend\", listener);\n  },\n  onTreeUnmount: (tree) => {\n    const { windowDragEndListener } = tree.getDataRef().current;\n    if (!windowDragEndListener) return;\n    window.removeEventListener(\"dragend\", windowDragEndListener);\n  },\n  treeInstance: {\n    getDragTarget: ({ tree }) => {\n      var _a, _b;\n      return (_b = (_a = tree.getState().dnd) == null ? void 0 : _a.dragTarget) != null ? _b : null;\n    },\n    getDragLineData: ({ tree }) => {\n      var _a, _b, _c, _d, _e, _f;\n      const target = tree.getDragTarget();\n      const indent = ((_a = target == null ? void 0 : target.item.getItemMeta().level) != null ? _a : 0) + 1;\n      const treeBb = (_b = tree.getElement()) == null ? void 0 : _b.getBoundingClientRect();\n      if (!target || !treeBb || !isOrderedDragTarget(target)) return null;\n      const leftOffset = target.dragLineLevel * ((_c = tree.getConfig().indent) != null ? _c : 1);\n      const targetItem = tree.getItems()[target.dragLineIndex];\n      if (!targetItem) {\n        const bb2 = (_e = (_d = tree.getItems()[target.dragLineIndex - 1]) == null ? void 0 : _d.getElement()) == null ? void 0 : _e.getBoundingClientRect();\n        if (bb2) {\n          return {\n            indent,\n            top: bb2.bottom - treeBb.top,\n            left: bb2.left + leftOffset - treeBb.left,\n            width: bb2.width - leftOffset\n          };\n        }\n      }\n      const bb = (_f = targetItem == null ? void 0 : targetItem.getElement()) == null ? void 0 : _f.getBoundingClientRect();\n      if (bb) {\n        return {\n          indent,\n          top: bb.top - treeBb.top,\n          left: bb.left + leftOffset - treeBb.left,\n          width: bb.width - leftOffset\n        };\n      }\n      return null;\n    },\n    getDragLineStyle: ({ tree }, topOffset = -1, leftOffset = -8) => {\n      const dragLine = tree.getDragLineData();\n      return dragLine ? {\n        position: \"absolute\",\n        top: `${dragLine.top + topOffset}px`,\n        left: `${dragLine.left + leftOffset}px`,\n        width: `${dragLine.width - leftOffset}px`,\n        pointerEvents: \"none\"\n        // important to prevent capturing drag events\n      } : { display: \"none\" };\n    },\n    getContainerProps: ({ prev, tree }, treeLabel) => {\n      const prevProps = prev == null ? void 0 : prev(treeLabel);\n      return __spreadProps(__spreadValues({}, prevProps), {\n        onDragOver: (e) => {\n          e.preventDefault();\n        },\n        onDrop: (e) => __async(null, null, function* () {\n          var _a, _b, _c;\n          const dataRef = tree.getDataRef();\n          const target = { item: tree.getRootItem() };\n          if (!canDrop(e.dataTransfer, target, tree)) {\n            return;\n          }\n          e.preventDefault();\n          const config = tree.getConfig();\n          const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n          dataRef.current.lastDragCode = void 0;\n          if (draggedItems) {\n            yield (_b = config.onDrop) == null ? void 0 : _b.call(config, draggedItems, target);\n          } else if (e.dataTransfer) {\n            yield (_c = config.onDropForeignDragObject) == null ? void 0 : _c.call(config, e.dataTransfer, target);\n          }\n        }),\n        style: __spreadProps(__spreadValues({}, prevProps == null ? void 0 : prevProps.style), {\n          position: \"relative\"\n        })\n      });\n    }\n  },\n  itemInstance: {\n    getProps: ({ tree, item, prev }) => __spreadProps(__spreadValues({}, prev == null ? void 0 : prev()), {\n      draggable: true,\n      onDragEnter: (e) => e.preventDefault(),\n      onDragStart: (e) => {\n        var _a, _b, _c, _d;\n        const selectedItems = tree.getSelectedItems ? tree.getSelectedItems() : [tree.getFocusedItem()];\n        const items = selectedItems.includes(item) ? selectedItems : [item];\n        const config = tree.getConfig();\n        if (!selectedItems.includes(item)) {\n          (_a = tree.setSelectedItems) == null ? void 0 : _a.call(tree, [item.getItemMeta().itemId]);\n        }\n        if (!((_c = (_b = config.canDrag) == null ? void 0 : _b.call(config, items)) != null ? _c : true)) {\n          e.preventDefault();\n          return;\n        }\n        if (config.setDragImage) {\n          const { imgElement, xOffset, yOffset } = config.setDragImage(items);\n          (_d = e.dataTransfer) == null ? void 0 : _d.setDragImage(imgElement, xOffset != null ? xOffset : 0, yOffset != null ? yOffset : 0);\n        }\n        if (config.createForeignDragObject && e.dataTransfer) {\n          const { format, data, dropEffect, effectAllowed } = config.createForeignDragObject(items);\n          e.dataTransfer.setData(format, data);\n          if (dropEffect) e.dataTransfer.dropEffect = dropEffect;\n          if (effectAllowed) e.dataTransfer.effectAllowed = effectAllowed;\n        }\n        tree.applySubStateUpdate(\"dnd\", {\n          draggedItems: items,\n          draggingOverItem: tree.getFocusedItem()\n        });\n      },\n      onDragOver: (e) => {\n        var _a, _b, _c;\n        e.stopPropagation();\n        const dataRef = tree.getDataRef();\n        const placement = getTargetPlacement(e, item, tree, true);\n        const nextDragCode = getDragCode(item, placement);\n        if (nextDragCode === dataRef.current.lastDragCode) {\n          if (dataRef.current.lastAllowDrop) {\n            e.preventDefault();\n          }\n          return;\n        }\n        dataRef.current.lastDragCode = nextDragCode;\n        dataRef.current.lastDragEnter = Date.now();\n        handleAutoOpenFolder(dataRef, tree, item, placement);\n        const target = getDragTarget(e, item, tree);\n        if (!((_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems) && (!e.dataTransfer || !((_c = (_b = tree.getConfig()).canDragForeignDragObjectOver) == null ? void 0 : _c.call(_b, e.dataTransfer, target)))) {\n          dataRef.current.lastAllowDrop = false;\n          return;\n        }\n        if (!canDrop(e.dataTransfer, target, tree)) {\n          dataRef.current.lastAllowDrop = false;\n          return;\n        }\n        tree.applySubStateUpdate(\"dnd\", (state) => __spreadProps(__spreadValues({}, state), {\n          dragTarget: target,\n          draggingOverItem: item\n        }));\n        dataRef.current.lastAllowDrop = true;\n        e.preventDefault();\n      },\n      onDragLeave: () => {\n        setTimeout(() => {\n          var _a;\n          const dataRef = tree.getDataRef();\n          if (((_a = dataRef.current.lastDragEnter) != null ? _a : 0) + 100 >= Date.now()) return;\n          dataRef.current.lastDragCode = \"no-drag\";\n          tree.applySubStateUpdate(\"dnd\", (state) => __spreadProps(__spreadValues({}, state), {\n            draggingOverItem: void 0,\n            dragTarget: void 0\n          }));\n        }, 100);\n      },\n      onDragEnd: (e) => {\n        var _a, _b;\n        const { onCompleteForeignDrop, canDragForeignDragObjectOver } = tree.getConfig();\n        const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n        if (((_b = e.dataTransfer) == null ? void 0 : _b.dropEffect) === \"none\" || !draggedItems) {\n          return;\n        }\n        const target = getDragTarget(e, item, tree);\n        if (canDragForeignDragObjectOver && e.dataTransfer && !canDragForeignDragObjectOver(e.dataTransfer, target)) {\n          return;\n        }\n        onCompleteForeignDrop == null ? void 0 : onCompleteForeignDrop(draggedItems);\n      },\n      onDrop: (e) => __async(null, null, function* () {\n        var _a, _b, _c;\n        e.stopPropagation();\n        const dataRef = tree.getDataRef();\n        const target = getDragTarget(e, item, tree);\n        const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n        const isValidDrop = canDrop(e.dataTransfer, target, tree);\n        tree.applySubStateUpdate(\"dnd\", {\n          draggedItems: void 0,\n          draggingOverItem: void 0,\n          dragTarget: void 0\n        });\n        if (!isValidDrop) {\n          return;\n        }\n        e.preventDefault();\n        const config = tree.getConfig();\n        dataRef.current.lastDragCode = void 0;\n        if (draggedItems) {\n          yield (_b = config.onDrop) == null ? void 0 : _b.call(config, draggedItems, target);\n        } else if (e.dataTransfer) {\n          yield (_c = config.onDropForeignDragObject) == null ? void 0 : _c.call(config, e.dataTransfer, target);\n        }\n      })\n    }),\n    isDragTarget: ({ tree, item }) => {\n      const target = tree.getDragTarget();\n      return target ? target.item.getId() === item.getId() : false;\n    },\n    isDragTargetAbove: ({ tree, item }) => {\n      const target = tree.getDragTarget();\n      if (!target || !isOrderedDragTarget(target) || target.item !== item.getParent())\n        return false;\n      return target.childIndex === item.getItemMeta().posInSet;\n    },\n    isDragTargetBelow: ({ tree, item }) => {\n      const target = tree.getDragTarget();\n      if (!target || !isOrderedDragTarget(target) || target.item !== item.getParent())\n        return false;\n      return target.childIndex - 1 === item.getItemMeta().posInSet;\n    },\n    isDraggingOver: ({ tree, item }) => {\n      var _a, _b;\n      return ((_b = (_a = tree.getState().dnd) == null ? void 0 : _a.draggingOverItem) == null ? void 0 : _b.getId()) === item.getId();\n    }\n  }\n};\n\n// src/features/keyboard-drag-and-drop/feature.ts\nvar getNextDragTarget = (tree, isUp, dragTarget) => {\n  var _a, _b, _c, _d;\n  const direction = isUp ? 0 : 1;\n  const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n  if (isOrderedDragTarget(dragTarget)) {\n    const parent = dragTarget.item.getParent();\n    const targetedItem = tree.getItems()[dragTarget.dragLineIndex - 1];\n    const targetCategory = targetedItem ? getItemDropCategory(targetedItem) : 0 /* Item */;\n    const maxLevel = (_b = targetedItem == null ? void 0 : targetedItem.getItemMeta().level) != null ? _b : 0;\n    const minLevel = (_d = (_c = targetedItem == null ? void 0 : targetedItem.getItemBelow()) == null ? void 0 : _c.getItemMeta().level) != null ? _d : 0;\n    if (targetCategory === 2 /* LastInGroup */) {\n      if (isUp && dragTarget.dragLineLevel < maxLevel) {\n        return getReparentTarget(\n          targetedItem,\n          dragTarget.dragLineLevel + 1,\n          draggedItems\n        );\n      }\n      if (!isUp && dragTarget.dragLineLevel > minLevel && parent) {\n        return getReparentTarget(\n          targetedItem,\n          dragTarget.dragLineLevel - 1,\n          draggedItems\n        );\n      }\n    }\n    const newIndex = dragTarget.dragLineIndex - 1 + direction;\n    const item = tree.getItems()[newIndex];\n    return item ? { item } : void 0;\n  }\n  const targetingExpandedFolder = getItemDropCategory(dragTarget.item) === 1 /* ExpandedFolder */;\n  if (targetingExpandedFolder && !isUp) {\n    return {\n      item: dragTarget.item,\n      childIndex: 0,\n      insertionIndex: getInsertionIndex(\n        dragTarget.item.getChildren(),\n        0,\n        draggedItems\n      ),\n      dragLineIndex: dragTarget.item.getItemMeta().index + direction,\n      dragLineLevel: dragTarget.item.getItemMeta().level + 1\n    };\n  }\n  const childIndex = dragTarget.item.getIndexInParent() + direction;\n  return {\n    item: dragTarget.item.getParent(),\n    childIndex,\n    insertionIndex: getInsertionIndex(\n      dragTarget.item.getParent().getChildren(),\n      childIndex,\n      draggedItems\n    ),\n    dragLineIndex: dragTarget.item.getItemMeta().index + direction,\n    dragLineLevel: dragTarget.item.getItemMeta().level\n  };\n};\nvar getNextValidDragTarget = (tree, isUp, previousTarget = ((_a) => (_a = tree.getState().dnd) == null ? void 0 : _a.dragTarget)()) => {\n  var _a2;\n  if (!previousTarget) return void 0;\n  const nextTarget = getNextDragTarget(tree, isUp, previousTarget);\n  const dataTransfer = (_a2 = tree.getDataRef().current.kDndDataTransfer) != null ? _a2 : null;\n  if (!nextTarget) return void 0;\n  if (canDrop(dataTransfer, nextTarget, tree)) {\n    return nextTarget;\n  }\n  return getNextValidDragTarget(tree, isUp, nextTarget);\n};\nvar updateScroll = (tree) => {\n  const state = tree.getState().dnd;\n  if (!(state == null ? void 0 : state.dragTarget) || isOrderedDragTarget(state.dragTarget)) return;\n  state.dragTarget.item.scrollTo({ block: \"nearest\", inline: \"nearest\" });\n};\nvar initiateDrag = (tree, draggedItems, dataTransfer) => {\n  var _a, _b;\n  const focusedItem = tree.getFocusedItem();\n  const { canDrag } = tree.getConfig();\n  if (draggedItems && canDrag && !canDrag(draggedItems)) {\n    return;\n  }\n  if (draggedItems) {\n    tree.applySubStateUpdate(\"dnd\", { draggedItems });\n    (_b = (_a = tree.getConfig()).onStartKeyboardDrag) == null ? void 0 : _b.call(_a, draggedItems);\n  } else if (dataTransfer) {\n    tree.getDataRef().current.kDndDataTransfer = dataTransfer;\n  }\n  const dragTarget = getNextValidDragTarget(tree, false, {\n    item: focusedItem\n  });\n  if (!dragTarget) return;\n  tree.applySubStateUpdate(\"dnd\", {\n    draggedItems,\n    dragTarget\n  });\n  tree.applySubStateUpdate(\"assistiveDndState\", 1 /* Started */);\n  updateScroll(tree);\n};\nvar moveDragPosition = (tree, isUp) => {\n  var _a;\n  const dragTarget = getNextValidDragTarget(tree, isUp);\n  if (!dragTarget) return;\n  tree.applySubStateUpdate(\"dnd\", {\n    draggedItems: (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems,\n    dragTarget\n  });\n  tree.applySubStateUpdate(\"assistiveDndState\", 2 /* Dragging */);\n  if (!isOrderedDragTarget(dragTarget)) {\n    dragTarget.item.setFocused();\n  }\n  updateScroll(tree);\n};\nvar keyboardDragAndDropFeature = {\n  key: \"keyboard-drag-and-drop\",\n  deps: [\"drag-and-drop\"],\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setAssistiveDndState: makeStateUpdater(\"assistiveDndState\", tree)\n  }, defaultConfig),\n  stateHandlerNames: {\n    assistiveDndState: \"setAssistiveDndState\"\n  },\n  treeInstance: {\n    startKeyboardDrag: ({ tree }, draggedItems) => {\n      initiateDrag(tree, draggedItems, void 0);\n    },\n    startKeyboardDragOnForeignObject: ({ tree }, dataTransfer) => {\n      initiateDrag(tree, void 0, dataTransfer);\n    },\n    stopKeyboardDrag: ({ tree }) => {\n      tree.getDataRef().current.kDndDataTransfer = void 0;\n      tree.applySubStateUpdate(\"dnd\", null);\n      tree.applySubStateUpdate(\"assistiveDndState\", 0 /* None */);\n    }\n  },\n  hotkeys: {\n    startDrag: {\n      hotkey: \"Control+Shift+KeyD\",\n      preventDefault: true,\n      isEnabled: (tree) => !tree.getState().dnd,\n      handler: (_, tree) => {\n        var _a, _b;\n        const selectedItems = (_b = (_a = tree.getSelectedItems) == null ? void 0 : _a.call(tree)) != null ? _b : [\n          tree.getFocusedItem()\n        ];\n        const focusedItem = tree.getFocusedItem();\n        tree.startKeyboardDrag(\n          selectedItems.includes(focusedItem) ? selectedItems : selectedItems.concat(focusedItem)\n        );\n      }\n    },\n    dragUp: {\n      hotkey: \"ArrowUp\",\n      preventDefault: true,\n      isEnabled: (tree) => !!tree.getState().dnd,\n      handler: (_, tree) => {\n        moveDragPosition(tree, true);\n      }\n    },\n    dragDown: {\n      hotkey: \"ArrowDown\",\n      preventDefault: true,\n      isEnabled: (tree) => !!tree.getState().dnd,\n      handler: (_, tree) => {\n        moveDragPosition(tree, false);\n      }\n    },\n    cancelDrag: {\n      hotkey: \"Escape\",\n      isEnabled: (tree) => !!tree.getState().dnd,\n      handler: (_, tree) => {\n        tree.stopKeyboardDrag();\n      }\n    },\n    completeDrag: {\n      hotkey: \"Enter\",\n      preventDefault: true,\n      isEnabled: (tree) => !!tree.getState().dnd,\n      handler: (e, tree) => __async(null, null, function* () {\n        var _a, _b, _c, _d;\n        e.stopPropagation();\n        const dataRef = tree.getDataRef();\n        const target = tree.getDragTarget();\n        const dataTransfer = (_a = dataRef.current.kDndDataTransfer) != null ? _a : null;\n        if (!target || !canDrop(dataTransfer, target, tree)) {\n          return;\n        }\n        const config = tree.getConfig();\n        const draggedItems = (_b = tree.getState().dnd) == null ? void 0 : _b.draggedItems;\n        dataRef.current.lastDragCode = void 0;\n        tree.applySubStateUpdate(\"dnd\", null);\n        if (draggedItems) {\n          yield (_c = config.onDrop) == null ? void 0 : _c.call(config, draggedItems, target);\n          tree.getItemInstance(draggedItems[0].getId()).setFocused();\n        } else if (dataTransfer) {\n          yield (_d = config.onDropForeignDragObject) == null ? void 0 : _d.call(config, dataTransfer, target);\n        }\n        tree.applySubStateUpdate(\n          \"assistiveDndState\",\n          3 /* Completed */\n        );\n      })\n    }\n  }\n};\n\n// src/features/search/feature.ts\nvar searchFeature = {\n  key: \"search\",\n  getInitialState: (initialState) => __spreadValues({\n    search: null\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setSearch: makeStateUpdater(\"search\", tree),\n    isSearchMatchingItem: (search, item) => search.length > 0 && item.getItemName().toLowerCase().includes(search.toLowerCase())\n  }, defaultConfig),\n  stateHandlerNames: {\n    search: \"setSearch\"\n  },\n  treeInstance: {\n    setSearch: ({ tree }, search) => {\n      var _a;\n      tree.applySubStateUpdate(\"search\", search);\n      (_a = tree.getItems().find(\n        (item) => {\n          var _a2, _b;\n          return (_b = (_a2 = tree.getConfig()).isSearchMatchingItem) == null ? void 0 : _b.call(_a2, tree.getSearchValue(), item);\n        }\n      )) == null ? void 0 : _a.setFocused();\n    },\n    openSearch: ({ tree }, initialValue = \"\") => {\n      var _a, _b;\n      tree.setSearch(initialValue);\n      (_b = (_a = tree.getConfig()).onOpenSearch) == null ? void 0 : _b.call(_a);\n      setTimeout(() => {\n        var _a2;\n        (_a2 = tree.getDataRef().current.searchInput) == null ? void 0 : _a2.focus();\n      });\n    },\n    closeSearch: ({ tree }) => {\n      var _a, _b;\n      tree.setSearch(null);\n      (_b = (_a = tree.getConfig()).onCloseSearch) == null ? void 0 : _b.call(_a);\n      tree.updateDomFocus();\n    },\n    isSearchOpen: ({ tree }) => tree.getState().search !== null,\n    getSearchValue: ({ tree }) => tree.getState().search || \"\",\n    registerSearchInputElement: ({ tree }, element) => {\n      const dataRef = tree.getDataRef();\n      dataRef.current.searchInput = element;\n      if (element && dataRef.current.keydownHandler) {\n        element.addEventListener(\"keydown\", dataRef.current.keydownHandler);\n      }\n    },\n    getSearchInputElement: ({ tree }) => {\n      var _a;\n      return (_a = tree.getDataRef().current.searchInput) != null ? _a : null;\n    },\n    // TODO memoize with propMemoizationFeature\n    getSearchInputElementProps: ({ tree }) => ({\n      value: tree.getSearchValue(),\n      onChange: (e) => tree.setSearch(e.target.value),\n      onBlur: () => tree.closeSearch(),\n      ref: tree.registerSearchInputElement\n    }),\n    getSearchMatchingItems: memo(\n      ({ tree }) => [\n        tree.getSearchValue(),\n        tree.getItems(),\n        tree.getConfig().isSearchMatchingItem\n      ],\n      (search, items, isSearchMatchingItem) => items.filter((item) => search && (isSearchMatchingItem == null ? void 0 : isSearchMatchingItem(search, item)))\n    )\n  },\n  itemInstance: {\n    isMatchingSearch: ({ tree, item }) => tree.getSearchMatchingItems().some((i) => i.getId() === item.getId())\n  },\n  hotkeys: {\n    openSearch: {\n      hotkey: \"LetterOrNumber\",\n      preventDefault: true,\n      // TODO make true default\n      isEnabled: (tree) => !tree.isSearchOpen(),\n      handler: (e, tree) => {\n        e.stopPropagation();\n        tree.openSearch(e.key);\n      }\n    },\n    closeSearch: {\n      // TODO allow multiple, i.e. Enter\n      hotkey: \"Escape\",\n      allowWhenInputFocused: true,\n      isEnabled: (tree) => tree.isSearchOpen(),\n      handler: (e, tree) => {\n        tree.closeSearch();\n      }\n    },\n    submitSearch: {\n      hotkey: \"Enter\",\n      allowWhenInputFocused: true,\n      isEnabled: (tree) => tree.isSearchOpen(),\n      handler: (e, tree) => {\n        tree.closeSearch();\n        tree.setSelectedItems([tree.getFocusedItem().getId()]);\n      }\n    },\n    nextSearchItem: {\n      hotkey: \"ArrowDown\",\n      allowWhenInputFocused: true,\n      canRepeat: true,\n      isEnabled: (tree) => tree.isSearchOpen(),\n      handler: (e, tree) => {\n        const focusItem = tree.getSearchMatchingItems().find(\n          (item) => item.getItemMeta().index > tree.getFocusedItem().getItemMeta().index\n        );\n        focusItem == null ? void 0 : focusItem.setFocused();\n        focusItem == null ? void 0 : focusItem.scrollTo({ block: \"nearest\", inline: \"nearest\" });\n      }\n    },\n    previousSearchItem: {\n      hotkey: \"ArrowUp\",\n      allowWhenInputFocused: true,\n      canRepeat: true,\n      isEnabled: (tree) => tree.isSearchOpen(),\n      handler: (e, tree) => {\n        const focusItem = [...tree.getSearchMatchingItems()].reverse().find(\n          (item) => item.getItemMeta().index < tree.getFocusedItem().getItemMeta().index\n        );\n        focusItem == null ? void 0 : focusItem.setFocused();\n        focusItem == null ? void 0 : focusItem.scrollTo({ block: \"nearest\", inline: \"nearest\" });\n      }\n    }\n  }\n};\n\n// src/features/renaming/feature.ts\nvar renamingFeature = {\n  key: \"renaming\",\n  overwrites: [\"drag-and-drop\"],\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setRenamingItem: makeStateUpdater(\"renamingItem\", tree),\n    setRenamingValue: makeStateUpdater(\"renamingValue\", tree),\n    canRename: () => true\n  }, defaultConfig),\n  stateHandlerNames: {\n    renamingItem: \"setRenamingItem\",\n    renamingValue: \"setRenamingValue\"\n  },\n  treeInstance: {\n    getRenamingItem: ({ tree }) => {\n      const itemId = tree.getState().renamingItem;\n      return itemId ? tree.getItemInstance(itemId) : null;\n    },\n    getRenamingValue: ({ tree }) => tree.getState().renamingValue || \"\",\n    abortRenaming: ({ tree }) => {\n      tree.applySubStateUpdate(\"renamingItem\", null);\n      tree.updateDomFocus();\n    },\n    completeRenaming: ({ tree }) => {\n      var _a;\n      const config = tree.getConfig();\n      const item = tree.getRenamingItem();\n      if (item) {\n        (_a = config.onRename) == null ? void 0 : _a.call(config, item, tree.getState().renamingValue || \"\");\n      }\n      tree.applySubStateUpdate(\"renamingItem\", null);\n      tree.updateDomFocus();\n    },\n    isRenamingItem: ({ tree }) => !!tree.getState().renamingItem\n  },\n  itemInstance: {\n    startRenaming: ({ tree, item, itemId }) => {\n      if (!item.canRename()) {\n        return;\n      }\n      tree.applySubStateUpdate(\"renamingItem\", itemId);\n      tree.applySubStateUpdate(\"renamingValue\", item.getItemName());\n    },\n    getRenameInputProps: ({ tree }) => ({\n      ref: (r) => r == null ? void 0 : r.focus(),\n      onBlur: () => tree.abortRenaming(),\n      value: tree.getRenamingValue(),\n      onChange: (e) => {\n        var _a;\n        tree.applySubStateUpdate(\"renamingValue\", (_a = e.target) == null ? void 0 : _a.value);\n      }\n    }),\n    canRename: ({ tree, item }) => {\n      var _a, _b, _c;\n      return (_c = (_b = (_a = tree.getConfig()).canRename) == null ? void 0 : _b.call(_a, item)) != null ? _c : true;\n    },\n    isRenaming: ({ tree, item }) => item.getId() === tree.getState().renamingItem,\n    getProps: ({ prev, item }) => {\n      var _a;\n      const isRenaming = item.isRenaming();\n      const prevProps = (_a = prev == null ? void 0 : prev()) != null ? _a : {};\n      return isRenaming ? __spreadProps(__spreadValues({}, prevProps), {\n        draggable: false,\n        onDragStart: () => {\n        }\n      }) : prevProps;\n    }\n  },\n  hotkeys: {\n    renameItem: {\n      hotkey: \"F2\",\n      handler: (e, tree) => {\n        tree.getFocusedItem().startRenaming();\n      }\n    },\n    abortRenaming: {\n      hotkey: \"Escape\",\n      allowWhenInputFocused: true,\n      isEnabled: (tree) => tree.isRenamingItem(),\n      handler: (e, tree) => {\n        tree.abortRenaming();\n      }\n    },\n    completeRenaming: {\n      hotkey: \"Enter\",\n      allowWhenInputFocused: true,\n      isEnabled: (tree) => tree.isRenamingItem(),\n      handler: (e, tree) => {\n        tree.completeRenaming();\n      }\n    }\n  }\n};\n\n// src/features/expand-all/feature.ts\nvar expandAllFeature = {\n  key: \"expand-all\",\n  treeInstance: {\n    expandAll: (_0, _1) => __async(null, [_0, _1], function* ({ tree }, cancelToken) {\n      yield Promise.all(\n        tree.getItems().map((item) => item.expandAll(cancelToken))\n      );\n    }),\n    collapseAll: ({ tree }) => {\n      tree.applySubStateUpdate(\"expandedItems\", []);\n      tree.rebuildTree();\n    }\n  },\n  itemInstance: {\n    expandAll: (_0, _1) => __async(null, [_0, _1], function* ({ tree, item }, cancelToken) {\n      if (cancelToken == null ? void 0 : cancelToken.current) {\n        return;\n      }\n      if (!item.isFolder()) {\n        return;\n      }\n      item.expand();\n      yield tree.waitForItemChildrenLoaded(item.getId());\n      yield Promise.all(\n        item.getChildren().map((child) => __async(null, null, function* () {\n          yield tree.waitForItemChildrenLoaded(item.getId());\n          yield child == null ? void 0 : child.expandAll(cancelToken);\n        }))\n      );\n    }),\n    collapseAll: ({ item }) => {\n      if (!item.isExpanded()) return;\n      for (const child of item.getChildren()) {\n        child == null ? void 0 : child.collapseAll();\n      }\n      item.collapse();\n    }\n  },\n  hotkeys: {\n    expandSelected: {\n      hotkey: \"Control+Shift+Plus\",\n      handler: (_, tree) => __async(null, null, function* () {\n        const cancelToken = { current: false };\n        const cancelHandler = (e) => {\n          if (e.code === \"Escape\") {\n            cancelToken.current = true;\n          }\n        };\n        document.addEventListener(\"keydown\", cancelHandler);\n        yield Promise.all(\n          tree.getSelectedItems().map((item) => item.expandAll(cancelToken))\n        );\n        document.removeEventListener(\"keydown\", cancelHandler);\n      })\n    },\n    collapseSelected: {\n      hotkey: \"Control+Shift+Minus\",\n      handler: (_, tree) => {\n        tree.getSelectedItems().forEach((item) => item.collapseAll());\n      }\n    }\n  }\n};\n\n// src/features/prop-memoization/feature.ts\nvar memoize = (props, memoizedProps) => {\n  for (const key in props) {\n    if (typeof props[key] === \"function\") {\n      if (memoizedProps && key in memoizedProps) {\n        props[key] = memoizedProps[key];\n      } else {\n        memoizedProps[key] = props[key];\n      }\n    }\n  }\n  return props;\n};\nvar propMemoizationFeature = {\n  key: \"prop-memoization\",\n  overwrites: [\n    \"main\",\n    \"async-data-loader\",\n    \"sync-data-loader\",\n    \"drag-and-drop\",\n    \"expand-all\",\n    \"hotkeys-core\",\n    \"renaming\",\n    \"search\",\n    \"selection\"\n  ],\n  treeInstance: {\n    getContainerProps: ({ tree, prev }, treeLabel) => {\n      var _a, _b, _c, _d, _e;\n      const dataRef = tree.getDataRef();\n      const props = (_a = prev == null ? void 0 : prev(treeLabel)) != null ? _a : {};\n      (_c = (_b = dataRef.current).memo) != null ? _c : _b.memo = {};\n      (_e = (_d = dataRef.current.memo).tree) != null ? _e : _d.tree = {};\n      return memoize(props, dataRef.current.memo.tree);\n    },\n    getSearchInputElementProps: ({ tree, prev }) => {\n      var _a, _b, _c, _d, _e;\n      const dataRef = tree.getDataRef();\n      const props = (_a = prev == null ? void 0 : prev()) != null ? _a : {};\n      (_c = (_b = dataRef.current).memo) != null ? _c : _b.memo = {};\n      (_e = (_d = dataRef.current.memo).search) != null ? _e : _d.search = {};\n      return memoize(props, dataRef.current.memo.search);\n    }\n  },\n  itemInstance: {\n    getProps: ({ item, prev }) => {\n      var _a, _b, _c, _d, _e;\n      const dataRef = item.getDataRef();\n      const props = (_a = prev == null ? void 0 : prev()) != null ? _a : {};\n      (_c = (_b = dataRef.current).memo) != null ? _c : _b.memo = {};\n      (_e = (_d = dataRef.current.memo).item) != null ? _e : _d.item = {};\n      return memoize(props, dataRef.current.memo.item);\n    },\n    getRenameInputProps: ({ item, prev }) => {\n      var _a, _b, _c, _d, _e;\n      const dataRef = item.getDataRef();\n      const props = (_a = prev == null ? void 0 : prev()) != null ? _a : {};\n      (_c = (_b = dataRef.current).memo) != null ? _c : _b.memo = {};\n      (_e = (_d = dataRef.current.memo).rename) != null ? _e : _d.rename = {};\n      return memoize(props, dataRef.current.memo.rename);\n    }\n  }\n};\n\n// src/utilities/remove-items-from-parents.ts\nvar removeItemsFromParents = (movedItems, onChangeChildren) => __async(null, null, function* () {\n  const movedItemsIds = movedItems.map((item) => item.getId());\n  const uniqueParents = [\n    ...new Set(movedItems.map((item) => item.getParent()))\n  ];\n  for (const parent of uniqueParents) {\n    const siblings = parent == null ? void 0 : parent.getChildren();\n    if (siblings && parent) {\n      const newChildren = siblings.filter((sibling) => !movedItemsIds.includes(sibling.getId())).map((i) => i.getId());\n      yield onChangeChildren(parent, newChildren);\n      if (parent && \"updateCachedChildrenIds\" in parent) {\n        parent == null ? void 0 : parent.updateCachedChildrenIds(newChildren);\n      }\n    }\n  }\n  movedItems[0].getTree().rebuildTree();\n});\n\n// src/utilities/insert-items-at-target.ts\nvar insertItemsAtTarget = (itemIds, target, onChangeChildren) => __async(null, null, function* () {\n  yield target.item.getTree().waitForItemChildrenLoaded(target.item.getId());\n  const oldChildrenIds = target.item.getTree().retrieveChildrenIds(target.item.getId());\n  if (!(\"childIndex\" in target)) {\n    const newChildren2 = [...oldChildrenIds, ...itemIds];\n    yield onChangeChildren(target.item, newChildren2);\n    if (target.item && \"updateCachedChildrenIds\" in target.item) {\n      target.item.updateCachedChildrenIds(newChildren2);\n    }\n    target.item.getTree().rebuildTree();\n    return;\n  }\n  const newChildren = [\n    ...oldChildrenIds.slice(0, target.insertionIndex),\n    ...itemIds,\n    ...oldChildrenIds.slice(target.insertionIndex)\n  ];\n  yield onChangeChildren(target.item, newChildren);\n  if (target.item && \"updateCachedChildrenIds\" in target.item) {\n    target.item.updateCachedChildrenIds(newChildren);\n  }\n  target.item.getTree().rebuildTree();\n});\n\n// src/utilities/create-on-drop-handler.ts\nvar createOnDropHandler = (onChangeChildren) => (items, target) => __async(null, null, function* () {\n  const itemIds = items.map((item) => item.getId());\n  yield removeItemsFromParents(items, onChangeChildren);\n  yield insertItemsAtTarget(itemIds, target, onChangeChildren);\n});\n\n// src/core/build-proxified-instance.ts\nvar noop = () => {\n};\nvar findPrevInstanceMethod = (features, instanceType, methodKey, featureSearchIndex) => {\n  var _a;\n  for (let i = featureSearchIndex; i >= 0; i--) {\n    const feature = features[i];\n    const itemInstanceMethod = (_a = feature[instanceType]) == null ? void 0 : _a[methodKey];\n    if (itemInstanceMethod) {\n      return i;\n    }\n  }\n  return null;\n};\nvar invokeInstanceMethod = (features, instanceType, opts, methodKey, featureIndex, args) => {\n  var _a;\n  const prevIndex = findPrevInstanceMethod(\n    features,\n    instanceType,\n    methodKey,\n    featureIndex - 1\n  );\n  const itemInstanceMethod = (_a = features[featureIndex][instanceType]) == null ? void 0 : _a[methodKey];\n  return itemInstanceMethod(\n    __spreadProps(__spreadValues({}, opts), {\n      prev: prevIndex !== null ? (...newArgs) => invokeInstanceMethod(\n        features,\n        instanceType,\n        opts,\n        methodKey,\n        prevIndex,\n        newArgs\n      ) : null\n    }),\n    ...args\n  );\n};\nvar buildProxiedInstance = (features, instanceType, buildOpts) => {\n  const opts = {};\n  const item = new Proxy(\n    {},\n    {\n      has(target, key) {\n        if (typeof key === \"symbol\") {\n          return false;\n        }\n        if (key === \"toJSON\") {\n          return false;\n        }\n        const hasInstanceMethod = findPrevInstanceMethod(\n          features,\n          instanceType,\n          key,\n          features.length - 1\n        );\n        return Boolean(hasInstanceMethod);\n      },\n      get(target, key) {\n        if (typeof key === \"symbol\") {\n          return void 0;\n        }\n        if (key === \"toJSON\") {\n          return {};\n        }\n        return (...args) => {\n          const featureIndex = findPrevInstanceMethod(\n            features,\n            instanceType,\n            key,\n            features.length - 1\n          );\n          if (featureIndex === null) {\n            throw throwError(`feature missing for method ${key}`);\n          }\n          return invokeInstanceMethod(\n            features,\n            instanceType,\n            opts,\n            key,\n            featureIndex,\n            args\n          );\n        };\n      }\n    }\n  );\n  Object.assign(opts, buildOpts(item));\n  return [item, noop];\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@headless-tree/core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@headless-tree/react/dist/chunk-FWCSY2DS.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@headless-tree/react/dist/chunk-FWCSY2DS.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __objRest: () => (/* binding */ __objRest),\n/* harmony export */   __spreadProps: () => (/* binding */ __spreadProps),\n/* harmony export */   __spreadValues: () => (/* binding */ __spreadValues)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzLXRyZWUvcmVhY3QvZGlzdC9jaHVuay1GV0NTWTJEUy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLDZEQUE2RDtBQUMzSTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFNRSIsInNvdXJjZXMiOlsiL1VzZXJzL3RlcmVjYWwvdWktaW50ZXJhY2l0dmUtbGV2MS9teS1hZG1pbi1wcm9qZWN0L3VpLWV4YW1wbGUtZnJvbnQvbm9kZV9tb2R1bGVzL0BoZWFkbGVzcy10cmVlL3JlYWN0L2Rpc3QvY2h1bmstRldDU1kyRFMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fc3ByZWFkVmFsdWVzID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKVxuICAgIGlmIChfX2hhc093blByb3AuY2FsbChiLCBwcm9wKSlcbiAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcbiAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKGIpKSB7XG4gICAgICBpZiAoX19wcm9wSXNFbnVtLmNhbGwoYiwgcHJvcCkpXG4gICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcbiAgICB9XG4gIHJldHVybiBhO1xufTtcbnZhciBfX3NwcmVhZFByb3BzID0gKGEsIGIpID0+IF9fZGVmUHJvcHMoYSwgX19nZXRPd25Qcm9wRGVzY3MoYikpO1xudmFyIF9fb2JqUmVzdCA9IChzb3VyY2UsIGV4Y2x1ZGUpID0+IHtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoc291cmNlLCBwcm9wKSAmJiBleGNsdWRlLmluZGV4T2YocHJvcCkgPCAwKVxuICAgICAgdGFyZ2V0W3Byb3BdID0gc291cmNlW3Byb3BdO1xuICBpZiAoc291cmNlICE9IG51bGwgJiYgX19nZXRPd25Qcm9wU3ltYm9scylcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMoc291cmNlKSkge1xuICAgICAgaWYgKGV4Y2x1ZGUuaW5kZXhPZihwcm9wKSA8IDAgJiYgX19wcm9wSXNFbnVtLmNhbGwoc291cmNlLCBwcm9wKSlcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgIH1cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbmV4cG9ydCB7XG4gIF9fc3ByZWFkVmFsdWVzLFxuICBfX3NwcmVhZFByb3BzLFxuICBfX29ialJlc3Rcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@headless-tree/react/dist/chunk-FWCSY2DS.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@headless-tree/react/dist/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@headless-tree/react/dist/index.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistiveTreeDescription: () => (/* binding */ AssistiveTreeDescription),\n/* harmony export */   useTree: () => (/* binding */ useTree)\n/* harmony export */ });\n/* harmony import */ var _chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-FWCSY2DS.mjs */ \"(ssr)/./node_modules/@headless-tree/react/dist/chunk-FWCSY2DS.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @headless-tree/core */ \"(ssr)/./node_modules/@headless-tree/core/dist/index.mjs\");\n\n\n// src/assistive-tree-description.tsx\n\n\nvar styles = {\n  position: \"absolute\",\n  margin: \"-1px\",\n  width: \"1px\",\n  height: \"1px\",\n  overflow: \"hidden\",\n  clip: \"rect(0 0 0 0)\"\n};\nvar getDefaultLabel = (dnd, assistiveState, hotkeys) => {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n  if (!hotkeys.startDrag) return \"\";\n  const itemNames = (_b = (_a = dnd == null ? void 0 : dnd.draggedItems) == null ? void 0 : _a.map((item) => item.getItemName()).join(\", \")) != null ? _b : \"\";\n  const position = !(dnd == null ? void 0 : dnd.dragTarget) ? \"None\" : \"childIndex\" in dnd.dragTarget ? `${dnd.dragTarget.childIndex} of ${dnd.dragTarget.item.getChildren().length} in ${dnd.dragTarget.item.getItemName()}` : `in ${dnd.dragTarget.item.getItemName()}`;\n  const navGuide = `Press ${(_c = hotkeys.dragUp) == null ? void 0 : _c.hotkey} and ${(_d = hotkeys.dragDown) == null ? void 0 : _d.hotkey} to move up or down, ${(_e = hotkeys.completeDrag) == null ? void 0 : _e.hotkey} to drop, ${(_f = hotkeys.cancelDrag) == null ? void 0 : _f.hotkey} to abort.`;\n  switch (assistiveState) {\n    case _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.Started:\n      return itemNames ? `Dragging ${itemNames}. Current position: ${position}. ${navGuide}` : `Current position: ${position}. ${navGuide}`;\n    case _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.Dragging:\n      return itemNames ? `${itemNames}, ${position}` : position;\n    case _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.Completed:\n      return `Drag completed. Press ${(_g = hotkeys.startDrag) == null ? void 0 : _g.hotkey} to move selected items`;\n    case _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.Aborted:\n      return `Drag cancelled. Press ${(_h = hotkeys.startDrag) == null ? void 0 : _h.hotkey} to move selected items`;\n    case _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.None:\n    default:\n      return `Press ${(_i = hotkeys.startDrag) == null ? void 0 : _i.hotkey} to move selected items`;\n  }\n};\nvar AssistiveTreeDescription = (_a) => {\n  var _b = _a, {\n    tree,\n    getLabel = getDefaultLabel\n  } = _b, props = (0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__objRest)(_b, [\n    \"tree\",\n    \"getLabel\"\n  ]);\n  var _a2;\n  const state = tree.getState();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"span\",\n    (0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadProps)((0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({\n      \"aria-live\": \"assertive\"\n    }, props), {\n      style: (0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)((0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({}, styles), props.style)\n    }),\n    getLabel(\n      state.dnd,\n      (_a2 = state.assistiveDndState) != null ? _a2 : _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.None,\n      tree.getHotkeyPresets()\n    )\n  );\n};\n\n// src/use-tree.tsx\n\n\nvar useApplyAfterMount = () => {\n  const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  const callbacks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    isMounted.current = true;\n    callbacks.current.forEach((callback) => callback());\n  }, []);\n  const apply = (callback) => {\n    if (isMounted.current) {\n      callback();\n    } else {\n      callbacks.current.push(callback);\n    }\n  };\n  return apply;\n};\nvar useTree = (config) => {\n  const apply = useApplyAfterMount();\n  const [tree] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => ({ current: (0,_headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.createTree)(config) }));\n  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => tree.current.getState()\n  );\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    tree.current.rebuildTree();\n  }, [tree]);\n  tree.current.setConfig((prev) => (0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadProps)((0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)((0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({}, prev), config), {\n    state: (0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)((0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({}, state), config.state),\n    setState: (state2) => {\n      apply(() => {\n        var _a;\n        setState(state2);\n        (_a = config.setState) == null ? void 0 : _a.call(config, state2);\n      });\n    }\n  }));\n  return tree.current;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzLXRyZWUvcmVhY3QvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFJOEI7O0FBRTlCO0FBQzBCO0FBR0c7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkdBQTJHLDJCQUEyQixLQUFLLDBDQUEwQyxLQUFLLGtDQUFrQyxVQUFVLGtDQUFrQztBQUN4USw0QkFBNEIsb0RBQW9ELE1BQU0sc0RBQXNELHNCQUFzQiwwREFBMEQsV0FBVyx3REFBd0Q7QUFDL1I7QUFDQSxTQUFTLGtFQUFpQjtBQUMxQixxQ0FBcUMsVUFBVSxzQkFBc0IsU0FBUyxJQUFJLFNBQVMseUJBQXlCLFNBQVMsSUFBSSxTQUFTO0FBQzFJLFNBQVMsa0VBQWlCO0FBQzFCLDRCQUE0QixVQUFVLElBQUksU0FBUztBQUNuRCxTQUFTLGtFQUFpQjtBQUMxQixzQ0FBc0MsdURBQXVEO0FBQzdGLFNBQVMsa0VBQWlCO0FBQzFCLHNDQUFzQyx1REFBdUQ7QUFDN0YsU0FBUyxrRUFBaUI7QUFDMUI7QUFDQSxzQkFBc0IsdURBQXVEO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksY0FBYyw4REFBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGdEQUFtQjtBQUM1QztBQUNBLElBQUksa0VBQWEsQ0FBQyxtRUFBYztBQUNoQztBQUNBLEtBQUs7QUFDTCxhQUFhLG1FQUFjLENBQUMsbUVBQWMsR0FBRztBQUM3QyxLQUFLO0FBQ0w7QUFDQTtBQUNBLHNEQUFzRCxrRUFBaUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDb0Q7QUFDSDtBQUNqRDtBQUNBLG9CQUFvQiw2Q0FBTTtBQUMxQixvQkFBb0IsNkNBQU07QUFDMUIsRUFBRSxnREFBUztBQUNYO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLCtDQUFRLFVBQVUsU0FBUywrREFBVSxVQUFVO0FBQ2hFLDRCQUE0QiwrQ0FBUTtBQUNwQztBQUNBO0FBQ0EsRUFBRSxnREFBUztBQUNYO0FBQ0EsR0FBRztBQUNILG1DQUFtQyxrRUFBYSxDQUFDLG1FQUFjLENBQUMsbUVBQWMsR0FBRztBQUNqRixXQUFXLG1FQUFjLENBQUMsbUVBQWMsR0FBRztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFJRSIsInNvdXJjZXMiOlsiL1VzZXJzL3RlcmVjYWwvdWktaW50ZXJhY2l0dmUtbGV2MS9teS1hZG1pbi1wcm9qZWN0L3VpLWV4YW1wbGUtZnJvbnQvbm9kZV9tb2R1bGVzL0BoZWFkbGVzcy10cmVlL3JlYWN0L2Rpc3QvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIF9fb2JqUmVzdCxcbiAgX19zcHJlYWRQcm9wcyxcbiAgX19zcHJlYWRWYWx1ZXNcbn0gZnJvbSBcIi4vY2h1bmstRldDU1kyRFMubWpzXCI7XG5cbi8vIHNyYy9hc3Npc3RpdmUtdHJlZS1kZXNjcmlwdGlvbi50c3hcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG4gIEFzc2lzdGl2ZURuZFN0YXRlXG59IGZyb20gXCJAaGVhZGxlc3MtdHJlZS9jb3JlXCI7XG52YXIgc3R5bGVzID0ge1xuICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICBtYXJnaW46IFwiLTFweFwiLFxuICB3aWR0aDogXCIxcHhcIixcbiAgaGVpZ2h0OiBcIjFweFwiLFxuICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgY2xpcDogXCJyZWN0KDAgMCAwIDApXCJcbn07XG52YXIgZ2V0RGVmYXVsdExhYmVsID0gKGRuZCwgYXNzaXN0aXZlU3RhdGUsIGhvdGtleXMpID0+IHtcbiAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2k7XG4gIGlmICghaG90a2V5cy5zdGFydERyYWcpIHJldHVybiBcIlwiO1xuICBjb25zdCBpdGVtTmFtZXMgPSAoX2IgPSAoX2EgPSBkbmQgPT0gbnVsbCA/IHZvaWQgMCA6IGRuZC5kcmFnZ2VkSXRlbXMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5tYXAoKGl0ZW0pID0+IGl0ZW0uZ2V0SXRlbU5hbWUoKSkuam9pbihcIiwgXCIpKSAhPSBudWxsID8gX2IgOiBcIlwiO1xuICBjb25zdCBwb3NpdGlvbiA9ICEoZG5kID09IG51bGwgPyB2b2lkIDAgOiBkbmQuZHJhZ1RhcmdldCkgPyBcIk5vbmVcIiA6IFwiY2hpbGRJbmRleFwiIGluIGRuZC5kcmFnVGFyZ2V0ID8gYCR7ZG5kLmRyYWdUYXJnZXQuY2hpbGRJbmRleH0gb2YgJHtkbmQuZHJhZ1RhcmdldC5pdGVtLmdldENoaWxkcmVuKCkubGVuZ3RofSBpbiAke2RuZC5kcmFnVGFyZ2V0Lml0ZW0uZ2V0SXRlbU5hbWUoKX1gIDogYGluICR7ZG5kLmRyYWdUYXJnZXQuaXRlbS5nZXRJdGVtTmFtZSgpfWA7XG4gIGNvbnN0IG5hdkd1aWRlID0gYFByZXNzICR7KF9jID0gaG90a2V5cy5kcmFnVXApID09IG51bGwgPyB2b2lkIDAgOiBfYy5ob3RrZXl9IGFuZCAkeyhfZCA9IGhvdGtleXMuZHJhZ0Rvd24pID09IG51bGwgPyB2b2lkIDAgOiBfZC5ob3RrZXl9IHRvIG1vdmUgdXAgb3IgZG93biwgJHsoX2UgPSBob3RrZXlzLmNvbXBsZXRlRHJhZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLmhvdGtleX0gdG8gZHJvcCwgJHsoX2YgPSBob3RrZXlzLmNhbmNlbERyYWcpID09IG51bGwgPyB2b2lkIDAgOiBfZi5ob3RrZXl9IHRvIGFib3J0LmA7XG4gIHN3aXRjaCAoYXNzaXN0aXZlU3RhdGUpIHtcbiAgICBjYXNlIEFzc2lzdGl2ZURuZFN0YXRlLlN0YXJ0ZWQ6XG4gICAgICByZXR1cm4gaXRlbU5hbWVzID8gYERyYWdnaW5nICR7aXRlbU5hbWVzfS4gQ3VycmVudCBwb3NpdGlvbjogJHtwb3NpdGlvbn0uICR7bmF2R3VpZGV9YCA6IGBDdXJyZW50IHBvc2l0aW9uOiAke3Bvc2l0aW9ufS4gJHtuYXZHdWlkZX1gO1xuICAgIGNhc2UgQXNzaXN0aXZlRG5kU3RhdGUuRHJhZ2dpbmc6XG4gICAgICByZXR1cm4gaXRlbU5hbWVzID8gYCR7aXRlbU5hbWVzfSwgJHtwb3NpdGlvbn1gIDogcG9zaXRpb247XG4gICAgY2FzZSBBc3Npc3RpdmVEbmRTdGF0ZS5Db21wbGV0ZWQ6XG4gICAgICByZXR1cm4gYERyYWcgY29tcGxldGVkLiBQcmVzcyAkeyhfZyA9IGhvdGtleXMuc3RhcnREcmFnKSA9PSBudWxsID8gdm9pZCAwIDogX2cuaG90a2V5fSB0byBtb3ZlIHNlbGVjdGVkIGl0ZW1zYDtcbiAgICBjYXNlIEFzc2lzdGl2ZURuZFN0YXRlLkFib3J0ZWQ6XG4gICAgICByZXR1cm4gYERyYWcgY2FuY2VsbGVkLiBQcmVzcyAkeyhfaCA9IGhvdGtleXMuc3RhcnREcmFnKSA9PSBudWxsID8gdm9pZCAwIDogX2guaG90a2V5fSB0byBtb3ZlIHNlbGVjdGVkIGl0ZW1zYDtcbiAgICBjYXNlIEFzc2lzdGl2ZURuZFN0YXRlLk5vbmU6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBgUHJlc3MgJHsoX2kgPSBob3RrZXlzLnN0YXJ0RHJhZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9pLmhvdGtleX0gdG8gbW92ZSBzZWxlY3RlZCBpdGVtc2A7XG4gIH1cbn07XG52YXIgQXNzaXN0aXZlVHJlZURlc2NyaXB0aW9uID0gKF9hKSA9PiB7XG4gIHZhciBfYiA9IF9hLCB7XG4gICAgdHJlZSxcbiAgICBnZXRMYWJlbCA9IGdldERlZmF1bHRMYWJlbFxuICB9ID0gX2IsIHByb3BzID0gX19vYmpSZXN0KF9iLCBbXG4gICAgXCJ0cmVlXCIsXG4gICAgXCJnZXRMYWJlbFwiXG4gIF0pO1xuICB2YXIgX2EyO1xuICBjb25zdCBzdGF0ZSA9IHRyZWUuZ2V0U3RhdGUoKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIFwic3BhblwiLFxuICAgIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgXCJhcmlhLWxpdmVcIjogXCJhc3NlcnRpdmVcIlxuICAgIH0sIHByb3BzKSwge1xuICAgICAgc3R5bGU6IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBzdHlsZXMpLCBwcm9wcy5zdHlsZSlcbiAgICB9KSxcbiAgICBnZXRMYWJlbChcbiAgICAgIHN0YXRlLmRuZCxcbiAgICAgIChfYTIgPSBzdGF0ZS5hc3Npc3RpdmVEbmRTdGF0ZSkgIT0gbnVsbCA/IF9hMiA6IEFzc2lzdGl2ZURuZFN0YXRlLk5vbmUsXG4gICAgICB0cmVlLmdldEhvdGtleVByZXNldHMoKVxuICAgIClcbiAgKTtcbn07XG5cbi8vIHNyYy91c2UtdHJlZS50c3hcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlVHJlZSB9IGZyb20gXCJAaGVhZGxlc3MtdHJlZS9jb3JlXCI7XG52YXIgdXNlQXBwbHlBZnRlck1vdW50ID0gKCkgPT4ge1xuICBjb25zdCBpc01vdW50ZWQgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCBjYWxsYmFja3MgPSB1c2VSZWYoW10pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlzTW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICBjYWxsYmFja3MuY3VycmVudC5mb3JFYWNoKChjYWxsYmFjaykgPT4gY2FsbGJhY2soKSk7XG4gIH0sIFtdKTtcbiAgY29uc3QgYXBwbHkgPSAoY2FsbGJhY2spID0+IHtcbiAgICBpZiAoaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrcy5jdXJyZW50LnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGFwcGx5O1xufTtcbnZhciB1c2VUcmVlID0gKGNvbmZpZykgPT4ge1xuICBjb25zdCBhcHBseSA9IHVzZUFwcGx5QWZ0ZXJNb3VudCgpO1xuICBjb25zdCBbdHJlZV0gPSB1c2VTdGF0ZSgoKSA9PiAoeyBjdXJyZW50OiBjcmVhdGVUcmVlKGNvbmZpZykgfSkpO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKFxuICAgICgpID0+IHRyZWUuY3VycmVudC5nZXRTdGF0ZSgpXG4gICk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdHJlZS5jdXJyZW50LnJlYnVpbGRUcmVlKCk7XG4gIH0sIFt0cmVlXSk7XG4gIHRyZWUuY3VycmVudC5zZXRDb25maWcoKHByZXYpID0+IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIHByZXYpLCBjb25maWcpLCB7XG4gICAgc3RhdGU6IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBzdGF0ZSksIGNvbmZpZy5zdGF0ZSksXG4gICAgc2V0U3RhdGU6IChzdGF0ZTIpID0+IHtcbiAgICAgIGFwcGx5KCgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzZXRTdGF0ZShzdGF0ZTIpO1xuICAgICAgICAoX2EgPSBjb25maWcuc2V0U3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKGNvbmZpZywgc3RhdGUyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSkpO1xuICByZXR1cm4gdHJlZS5jdXJyZW50O1xufTtcbmV4cG9ydCB7XG4gIEFzc2lzdGl2ZVRyZWVEZXNjcmlwdGlvbixcbiAgdXNlVHJlZVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@headless-tree/react/dist/index.mjs\n");

/***/ })

};
;