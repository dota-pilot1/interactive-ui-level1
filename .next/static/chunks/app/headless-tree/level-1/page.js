/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/headless-tree/level-1/page"],{

/***/ "(app-pages-browser)/./node_modules/@headless-tree/core/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@headless-tree/core/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistiveDndState: () => (/* binding */ AssistiveDndState),\n/* harmony export */   CheckedState: () => (/* binding */ CheckedState),\n/* harmony export */   DragTargetPosition: () => (/* binding */ DragTargetPosition),\n/* harmony export */   asyncDataLoaderFeature: () => (/* binding */ asyncDataLoaderFeature),\n/* harmony export */   buildProxiedInstance: () => (/* binding */ buildProxiedInstance),\n/* harmony export */   buildStaticInstance: () => (/* binding */ buildStaticInstance),\n/* harmony export */   checkboxesFeature: () => (/* binding */ checkboxesFeature),\n/* harmony export */   createOnDropHandler: () => (/* binding */ createOnDropHandler),\n/* harmony export */   createTree: () => (/* binding */ createTree),\n/* harmony export */   dragAndDropFeature: () => (/* binding */ dragAndDropFeature),\n/* harmony export */   expandAllFeature: () => (/* binding */ expandAllFeature),\n/* harmony export */   hotkeysCoreFeature: () => (/* binding */ hotkeysCoreFeature),\n/* harmony export */   insertItemsAtTarget: () => (/* binding */ insertItemsAtTarget),\n/* harmony export */   isOrderedDragTarget: () => (/* binding */ isOrderedDragTarget),\n/* harmony export */   keyboardDragAndDropFeature: () => (/* binding */ keyboardDragAndDropFeature),\n/* harmony export */   makeStateUpdater: () => (/* binding */ makeStateUpdater),\n/* harmony export */   propMemoizationFeature: () => (/* binding */ propMemoizationFeature),\n/* harmony export */   removeItemsFromParents: () => (/* binding */ removeItemsFromParents),\n/* harmony export */   renamingFeature: () => (/* binding */ renamingFeature),\n/* harmony export */   searchFeature: () => (/* binding */ searchFeature),\n/* harmony export */   selectionFeature: () => (/* binding */ selectionFeature),\n/* harmony export */   syncDataLoaderFeature: () => (/* binding */ syncDataLoaderFeature)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/utils.ts\nvar memo = (deps, fn) => {\n  let value;\n  let oldDeps = null;\n  return (...a) => {\n    const newDeps = deps(...a);\n    if (!value) {\n      value = fn(...newDeps);\n      oldDeps = newDeps;\n      return value;\n    }\n    const match = oldDeps && oldDeps.length === newDeps.length && !oldDeps.some((dep, i) => dep !== newDeps[i]);\n    if (match) {\n      return value;\n    }\n    value = fn(...newDeps);\n    oldDeps = newDeps;\n    return value;\n  };\n};\nfunction functionalUpdate(updater, input) {\n  return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction makeStateUpdater(key, instance) {\n  return (updater) => {\n    instance.setState((old) => {\n      return __spreadProps(__spreadValues({}, old), {\n        [key]: functionalUpdate(updater, old[key])\n      });\n    });\n  };\n}\nvar poll = (fn, interval = 100, timeout = 1e3) => new Promise((resolve) => {\n  let clear;\n  const i = setInterval(() => {\n    if (fn()) {\n      resolve();\n      clearInterval(i);\n      clearTimeout(clear);\n    }\n  }, interval);\n  clear = setTimeout(() => {\n    clearInterval(i);\n  }, timeout);\n});\n\n// src/utilities/errors.ts\nvar prefix = \"Headless Tree: \";\nvar throwError = (message) => Error(prefix + message);\nvar logWarning = (message) => console.warn(prefix + message);\n\n// src/features/tree/feature.ts\nvar treeFeature = {\n  key: \"tree\",\n  getInitialState: (initialState) => __spreadValues({\n    expandedItems: [],\n    focusedItem: null\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setExpandedItems: makeStateUpdater(\"expandedItems\", tree),\n    setFocusedItem: makeStateUpdater(\"focusedItem\", tree)\n  }, defaultConfig),\n  stateHandlerNames: {\n    expandedItems: \"setExpandedItems\",\n    focusedItem: \"setFocusedItem\"\n  },\n  treeInstance: {\n    getItemsMeta: ({ tree }) => {\n      const { rootItemId } = tree.getConfig();\n      const { expandedItems } = tree.getState();\n      const flatItems = [];\n      const expandedItemsSet = new Set(expandedItems);\n      const recursiveAdd = (itemId, path, level, setSize, posInSet) => {\n        var _a;\n        if (path.includes(itemId)) {\n          logWarning(`Circular reference for ${path.join(\".\")}`);\n          return;\n        }\n        flatItems.push({\n          itemId,\n          level,\n          index: flatItems.length,\n          parentId: path.at(-1),\n          setSize,\n          posInSet\n        });\n        if (expandedItemsSet.has(itemId)) {\n          const children2 = (_a = tree.retrieveChildrenIds(itemId)) != null ? _a : [];\n          let i2 = 0;\n          for (const childId of children2) {\n            recursiveAdd(\n              childId,\n              path.concat(itemId),\n              level + 1,\n              children2.length,\n              i2++\n            );\n          }\n        }\n      };\n      const children = tree.retrieveChildrenIds(rootItemId);\n      let i = 0;\n      for (const itemId of children) {\n        recursiveAdd(itemId, [rootItemId], 0, children.length, i++);\n      }\n      return flatItems;\n    },\n    getFocusedItem: ({ tree }) => {\n      var _a;\n      const focusedItemId = tree.getState().focusedItem;\n      return (_a = focusedItemId !== null ? tree.getItemInstance(focusedItemId) : null) != null ? _a : tree.getItems()[0];\n    },\n    getRootItem: ({ tree }) => {\n      const { rootItemId } = tree.getConfig();\n      return tree.getItemInstance(rootItemId);\n    },\n    focusNextItem: ({ tree }) => {\n      var _a;\n      const focused = tree.getFocusedItem().getItemMeta();\n      if (!focused) return;\n      const nextIndex = Math.min(focused.index + 1, tree.getItems().length - 1);\n      (_a = tree.getItems()[nextIndex]) == null ? void 0 : _a.setFocused();\n    },\n    focusPreviousItem: ({ tree }) => {\n      var _a;\n      const focused = tree.getFocusedItem().getItemMeta();\n      if (!focused) return;\n      const nextIndex = Math.max(focused.index - 1, 0);\n      (_a = tree.getItems()[nextIndex]) == null ? void 0 : _a.setFocused();\n    },\n    updateDomFocus: ({ tree }) => {\n      setTimeout(() => __async(null, null, function* () {\n        var _a, _b;\n        const focusedItem = tree.getFocusedItem();\n        (_b = (_a = tree.getConfig()).scrollToItem) == null ? void 0 : _b.call(_a, focusedItem);\n        yield poll(() => focusedItem.getElement() !== null, 20);\n        const focusedElement = focusedItem.getElement();\n        if (!focusedElement) return;\n        focusedElement.focus();\n      }));\n    },\n    getContainerProps: ({ prev, tree }, treeLabel) => __spreadProps(__spreadValues({}, prev == null ? void 0 : prev()), {\n      role: \"tree\",\n      \"aria-label\": treeLabel != null ? treeLabel : \"\",\n      ref: tree.registerElement\n    }),\n    // relevant for hotkeys of this feature\n    isSearchOpen: () => false\n  },\n  itemInstance: {\n    scrollTo: (_0, _1) => __async(null, [_0, _1], function* ({ tree, item }, scrollIntoViewArg) {\n      var _a, _b, _c;\n      (_b = (_a = tree.getConfig()).scrollToItem) == null ? void 0 : _b.call(_a, item);\n      yield poll(() => item.getElement() !== null, 20);\n      (_c = item.getElement()) == null ? void 0 : _c.scrollIntoView(scrollIntoViewArg);\n    }),\n    getId: ({ itemId }) => itemId,\n    getKey: ({ itemId }) => itemId,\n    // TODO apply to all stories to use\n    getProps: ({ item, prev }) => {\n      const itemMeta = item.getItemMeta();\n      return __spreadProps(__spreadValues({}, prev == null ? void 0 : prev()), {\n        ref: item.registerElement,\n        role: \"treeitem\",\n        \"aria-setsize\": itemMeta.setSize,\n        \"aria-posinset\": itemMeta.posInSet + 1,\n        \"aria-selected\": \"false\",\n        \"aria-label\": item.getItemName(),\n        \"aria-level\": itemMeta.level + 1,\n        tabIndex: item.isFocused() ? 0 : -1,\n        onClick: (e) => {\n          item.setFocused();\n          item.primaryAction();\n          if (e.ctrlKey || e.shiftKey || e.metaKey) {\n            return;\n          }\n          if (!item.isFolder()) {\n            return;\n          }\n          if (item.isExpanded()) {\n            item.collapse();\n          } else {\n            item.expand();\n          }\n        }\n      });\n    },\n    expand: ({ tree, item, itemId }) => {\n      var _a;\n      if (!item.isFolder()) {\n        return;\n      }\n      if ((_a = tree.getState().loadingItemChildrens) == null ? void 0 : _a.includes(itemId)) {\n        return;\n      }\n      tree.applySubStateUpdate(\"expandedItems\", (expandedItems) => [\n        ...expandedItems,\n        itemId\n      ]);\n      tree.rebuildTree();\n    },\n    collapse: ({ tree, item, itemId }) => {\n      if (!item.isFolder()) {\n        return;\n      }\n      tree.applySubStateUpdate(\n        \"expandedItems\",\n        (expandedItems) => expandedItems.filter((id) => id !== itemId)\n      );\n      tree.rebuildTree();\n    },\n    getItemData: ({ tree, itemId }) => tree.retrieveItemData(itemId),\n    equals: ({ item }, other) => item.getId() === (other == null ? void 0 : other.getId()),\n    isExpanded: ({ tree, itemId }) => tree.getState().expandedItems.includes(itemId),\n    isDescendentOf: ({ item }, parentId) => {\n      const parent = item.getParent();\n      return Boolean(\n        (parent == null ? void 0 : parent.getId()) === parentId || (parent == null ? void 0 : parent.isDescendentOf(parentId))\n      );\n    },\n    isFocused: ({ tree, item, itemId }) => tree.getState().focusedItem === itemId || tree.getState().focusedItem === null && item.getItemMeta().index === 0,\n    isFolder: ({ tree, item }) => item.getItemMeta().level === -1 || tree.getConfig().isItemFolder(item),\n    getItemName: ({ tree, item }) => {\n      const config = tree.getConfig();\n      return config.getItemName(item);\n    },\n    setFocused: ({ tree, itemId }) => {\n      tree.applySubStateUpdate(\"focusedItem\", itemId);\n    },\n    primaryAction: ({ tree, item }) => {\n      var _a, _b;\n      return (_b = (_a = tree.getConfig()).onPrimaryAction) == null ? void 0 : _b.call(_a, item);\n    },\n    getParent: ({ tree, item }) => item.getItemMeta().parentId ? tree.getItemInstance(item.getItemMeta().parentId) : void 0,\n    getIndexInParent: ({ item }) => item.getItemMeta().posInSet,\n    getChildren: ({ tree, itemId }) => tree.retrieveChildrenIds(itemId).map((id) => tree.getItemInstance(id)),\n    getTree: ({ tree }) => tree,\n    getItemAbove: ({ tree, item }) => tree.getItems()[item.getItemMeta().index - 1],\n    getItemBelow: ({ tree, item }) => tree.getItems()[item.getItemMeta().index + 1]\n  },\n  hotkeys: {\n    focusNextItem: {\n      hotkey: \"ArrowDown\",\n      canRepeat: true,\n      preventDefault: true,\n      isEnabled: (tree) => {\n        var _a, _b;\n        return !((_b = (_a = tree.isSearchOpen) == null ? void 0 : _a.call(tree)) != null ? _b : false) && !tree.getState().dnd;\n      },\n      // TODO what happens when the feature doesnt exist? proxy method still claims to exist\n      handler: (e, tree) => {\n        tree.focusNextItem();\n        tree.updateDomFocus();\n      }\n    },\n    focusPreviousItem: {\n      hotkey: \"ArrowUp\",\n      canRepeat: true,\n      preventDefault: true,\n      isEnabled: (tree) => {\n        var _a, _b;\n        return !((_b = (_a = tree.isSearchOpen) == null ? void 0 : _a.call(tree)) != null ? _b : false) && !tree.getState().dnd;\n      },\n      handler: (e, tree) => {\n        tree.focusPreviousItem();\n        tree.updateDomFocus();\n      }\n    },\n    expandOrDown: {\n      hotkey: \"ArrowRight\",\n      canRepeat: true,\n      handler: (e, tree) => {\n        const item = tree.getFocusedItem();\n        if (item.isExpanded() || !item.isFolder()) {\n          tree.focusNextItem();\n          tree.updateDomFocus();\n        } else {\n          item.expand();\n        }\n      }\n    },\n    collapseOrUp: {\n      hotkey: \"ArrowLeft\",\n      canRepeat: true,\n      handler: (e, tree) => {\n        var _a;\n        const item = tree.getFocusedItem();\n        if ((!item.isExpanded() || !item.isFolder()) && item.getItemMeta().level !== 0) {\n          (_a = item.getParent()) == null ? void 0 : _a.setFocused();\n          tree.updateDomFocus();\n        } else {\n          item.collapse();\n        }\n      }\n    },\n    focusFirstItem: {\n      hotkey: \"Home\",\n      handler: (e, tree) => {\n        var _a;\n        (_a = tree.getItems()[0]) == null ? void 0 : _a.setFocused();\n        tree.updateDomFocus();\n      }\n    },\n    focusLastItem: {\n      hotkey: \"End\",\n      handler: (e, tree) => {\n        var _a;\n        (_a = tree.getItems()[tree.getItems().length - 1]) == null ? void 0 : _a.setFocused();\n        tree.updateDomFocus();\n      }\n    }\n  }\n};\n\n// src/core/build-static-instance.ts\nvar buildStaticInstance = (features, instanceType, buildOpts) => {\n  const instance = {};\n  const finalize = () => {\n    const opts = buildOpts(instance);\n    featureLoop: for (let i = 0; i < features.length; i++) {\n      const definition = features[i][instanceType];\n      if (!definition) continue featureLoop;\n      methodLoop: for (const [key, method] of Object.entries(definition)) {\n        if (!method) continue methodLoop;\n        const prev = instance[key];\n        instance[key] = (...args) => {\n          return method(__spreadProps(__spreadValues({}, opts), { prev }), ...args);\n        };\n      }\n    }\n  };\n  return [instance, finalize];\n};\n\n// src/core/create-tree.ts\nvar verifyFeatures = (features) => {\n  var _a;\n  const loadedFeatures = features == null ? void 0 : features.map((feature) => feature.key);\n  for (const feature of features != null ? features : []) {\n    const missingDependency = (_a = feature.deps) == null ? void 0 : _a.find(\n      (dep) => !(loadedFeatures == null ? void 0 : loadedFeatures.includes(dep))\n    );\n    if (missingDependency) {\n      throw throwError(`${feature.key} needs ${missingDependency}`);\n    }\n  }\n};\nvar exhaustiveSort = (arr, compareFn) => {\n  const n = arr.length;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (compareFn(arr[j], arr[i]) < 0) {\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n    }\n  }\n  return arr;\n};\nvar compareFeatures = (originalOrder) => (feature1, feature2) => {\n  var _a, _b;\n  if (feature2.key && ((_a = feature1.overwrites) == null ? void 0 : _a.includes(feature2.key))) {\n    return 1;\n  }\n  if (feature1.key && ((_b = feature2.overwrites) == null ? void 0 : _b.includes(feature1.key))) {\n    return -1;\n  }\n  return originalOrder.indexOf(feature1) - originalOrder.indexOf(feature2);\n};\nvar sortFeatures = (features = []) => exhaustiveSort(features, compareFeatures(features));\nvar createTree = (initialConfig) => {\n  var _a, _b, _c, _d;\n  const buildInstance = (_a = initialConfig.instanceBuilder) != null ? _a : buildStaticInstance;\n  const additionalFeatures = [\n    treeFeature,\n    ...sortFeatures(initialConfig.features)\n  ];\n  verifyFeatures(additionalFeatures);\n  const features = [...additionalFeatures];\n  const [treeInstance, finalizeTree] = buildInstance(\n    features,\n    \"treeInstance\",\n    (tree) => ({ tree })\n  );\n  let state = additionalFeatures.reduce(\n    (acc, feature) => {\n      var _a2, _b2;\n      return (_b2 = (_a2 = feature.getInitialState) == null ? void 0 : _a2.call(feature, acc, treeInstance)) != null ? _b2 : acc;\n    },\n    (_c = (_b = initialConfig.initialState) != null ? _b : initialConfig.state) != null ? _c : {}\n  );\n  let config = additionalFeatures.reduce(\n    (acc, feature) => {\n      var _a2, _b2;\n      return (_b2 = (_a2 = feature.getDefaultConfig) == null ? void 0 : _a2.call(feature, acc, treeInstance)) != null ? _b2 : acc;\n    },\n    initialConfig\n  );\n  const stateHandlerNames = additionalFeatures.reduce(\n    (acc, feature) => __spreadValues(__spreadValues({}, acc), feature.stateHandlerNames),\n    {}\n  );\n  let treeElement;\n  const treeDataRef = { current: {} };\n  const itemInstancesMap = {};\n  let itemInstances = [];\n  const itemElementsMap = {};\n  const itemDataRefs = {};\n  let itemMetaMap = {};\n  const hotkeyPresets = {};\n  const rebuildItemMeta = () => {\n    itemInstances = [];\n    itemMetaMap = {};\n    const [rootInstance, finalizeRootInstance] = buildInstance(\n      features,\n      \"itemInstance\",\n      (item) => ({ item, tree: treeInstance, itemId: config.rootItemId })\n    );\n    finalizeRootInstance();\n    itemInstancesMap[config.rootItemId] = rootInstance;\n    itemMetaMap[config.rootItemId] = {\n      itemId: config.rootItemId,\n      index: -1,\n      parentId: null,\n      level: -1,\n      posInSet: 0,\n      setSize: 1\n    };\n    for (const item of treeInstance.getItemsMeta()) {\n      itemMetaMap[item.itemId] = item;\n      if (!itemInstancesMap[item.itemId]) {\n        const [instance, finalizeInstance] = buildInstance(\n          features,\n          \"itemInstance\",\n          (instance2) => ({\n            item: instance2,\n            tree: treeInstance,\n            itemId: item.itemId\n          })\n        );\n        finalizeInstance();\n        itemInstancesMap[item.itemId] = instance;\n        itemInstances.push(instance);\n      } else {\n        itemInstances.push(itemInstancesMap[item.itemId]);\n      }\n    }\n  };\n  const eachFeature = (fn) => {\n    for (const feature of additionalFeatures) {\n      fn(feature);\n    }\n  };\n  const mainFeature = {\n    key: \"main\",\n    treeInstance: {\n      getState: () => state,\n      setState: ({}, updater) => {\n        var _a2;\n        (_a2 = config.setState) == null ? void 0 : _a2.call(config, state);\n      },\n      applySubStateUpdate: ({}, stateName, updater) => {\n        state[stateName] = typeof updater === \"function\" ? updater(state[stateName]) : updater;\n        const externalStateSetter = config[stateHandlerNames[stateName]];\n        externalStateSetter == null ? void 0 : externalStateSetter(state[stateName]);\n      },\n      // TODO rebuildSubTree: (itemId: string) => void;\n      rebuildTree: () => {\n        var _a2;\n        rebuildItemMeta();\n        (_a2 = config.setState) == null ? void 0 : _a2.call(config, state);\n      },\n      getConfig: () => config,\n      setConfig: (_, updater) => {\n        var _a2, _b2, _c2;\n        const newConfig = typeof updater === \"function\" ? updater(config) : updater;\n        const hasChangedExpandedItems = ((_a2 = newConfig.state) == null ? void 0 : _a2.expandedItems) && ((_b2 = newConfig.state) == null ? void 0 : _b2.expandedItems) !== state.expandedItems;\n        config = newConfig;\n        if (newConfig.state) {\n          state = __spreadValues(__spreadValues({}, state), newConfig.state);\n        }\n        if (hasChangedExpandedItems) {\n          rebuildItemMeta();\n          (_c2 = config.setState) == null ? void 0 : _c2.call(config, state);\n        }\n      },\n      getItemInstance: ({}, itemId) => {\n        const existingInstance = itemInstancesMap[itemId];\n        if (!existingInstance) {\n          const [instance, finalizeInstance] = buildInstance(\n            features,\n            \"itemInstance\",\n            (instance2) => ({\n              item: instance2,\n              tree: treeInstance,\n              itemId\n            })\n          );\n          finalizeInstance();\n          return instance;\n        }\n        return existingInstance;\n      },\n      getItems: () => itemInstances,\n      registerElement: ({}, element) => {\n        if (treeElement === element) {\n          return;\n        }\n        if (treeElement && !element) {\n          eachFeature(\n            (feature) => {\n              var _a2;\n              return (_a2 = feature.onTreeUnmount) == null ? void 0 : _a2.call(feature, treeInstance, treeElement);\n            }\n          );\n        } else if (!treeElement && element) {\n          eachFeature(\n            (feature) => {\n              var _a2;\n              return (_a2 = feature.onTreeMount) == null ? void 0 : _a2.call(feature, treeInstance, element);\n            }\n          );\n        }\n        treeElement = element;\n      },\n      getElement: () => treeElement,\n      getDataRef: () => treeDataRef,\n      getHotkeyPresets: () => hotkeyPresets\n    },\n    itemInstance: {\n      registerElement: ({ itemId, item }, element) => {\n        if (itemElementsMap[itemId] === element) {\n          return;\n        }\n        const oldElement = itemElementsMap[itemId];\n        if (oldElement && !element) {\n          eachFeature(\n            (feature) => {\n              var _a2;\n              return (_a2 = feature.onItemUnmount) == null ? void 0 : _a2.call(feature, item, oldElement, treeInstance);\n            }\n          );\n        } else if (!oldElement && element) {\n          eachFeature(\n            (feature) => {\n              var _a2;\n              return (_a2 = feature.onItemMount) == null ? void 0 : _a2.call(feature, item, element, treeInstance);\n            }\n          );\n        }\n        itemElementsMap[itemId] = element;\n      },\n      getElement: ({ itemId }) => itemElementsMap[itemId],\n      // eslint-disable-next-line no-return-assign\n      getDataRef: ({ itemId }) => {\n        var _a2;\n        return (_a2 = itemDataRefs[itemId]) != null ? _a2 : itemDataRefs[itemId] = { current: {} };\n      },\n      getItemMeta: ({ itemId }) => {\n        var _a2;\n        return (_a2 = itemMetaMap[itemId]) != null ? _a2 : {\n          itemId,\n          parentId: null,\n          level: -1,\n          index: -1,\n          posInSet: 0,\n          setSize: 1\n        };\n      }\n    }\n  };\n  features.unshift(mainFeature);\n  for (const feature of features) {\n    Object.assign(hotkeyPresets, (_d = feature.hotkeys) != null ? _d : {});\n  }\n  finalizeTree();\n  return treeInstance;\n};\n\n// src/features/drag-and-drop/types.ts\nvar DragTargetPosition = /* @__PURE__ */ ((DragTargetPosition2) => {\n  DragTargetPosition2[\"Top\"] = \"top\";\n  DragTargetPosition2[\"Bottom\"] = \"bottom\";\n  DragTargetPosition2[\"Item\"] = \"item\";\n  return DragTargetPosition2;\n})(DragTargetPosition || {});\n\n// src/features/keyboard-drag-and-drop/types.ts\nvar AssistiveDndState = /* @__PURE__ */ ((AssistiveDndState2) => {\n  AssistiveDndState2[AssistiveDndState2[\"None\"] = 0] = \"None\";\n  AssistiveDndState2[AssistiveDndState2[\"Started\"] = 1] = \"Started\";\n  AssistiveDndState2[AssistiveDndState2[\"Dragging\"] = 2] = \"Dragging\";\n  AssistiveDndState2[AssistiveDndState2[\"Completed\"] = 3] = \"Completed\";\n  AssistiveDndState2[AssistiveDndState2[\"Aborted\"] = 4] = \"Aborted\";\n  return AssistiveDndState2;\n})(AssistiveDndState || {});\n\n// src/features/checkboxes/types.ts\nvar CheckedState = /* @__PURE__ */ ((CheckedState2) => {\n  CheckedState2[\"Checked\"] = \"checked\";\n  CheckedState2[\"Unchecked\"] = \"unchecked\";\n  CheckedState2[\"Indeterminate\"] = \"indeterminate\";\n  return CheckedState2;\n})(CheckedState || {});\n\n// src/features/selection/feature.ts\nvar selectionFeature = {\n  key: \"selection\",\n  getInitialState: (initialState) => __spreadValues({\n    selectedItems: []\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setSelectedItems: makeStateUpdater(\"selectedItems\", tree)\n  }, defaultConfig),\n  stateHandlerNames: {\n    selectedItems: \"setSelectedItems\"\n  },\n  treeInstance: {\n    setSelectedItems: ({ tree }, selectedItems) => {\n      tree.applySubStateUpdate(\"selectedItems\", selectedItems);\n    },\n    getSelectedItems: ({ tree }) => {\n      return tree.getState().selectedItems.map(tree.getItemInstance);\n    }\n  },\n  itemInstance: {\n    select: ({ tree, itemId }) => {\n      const { selectedItems } = tree.getState();\n      tree.setSelectedItems(\n        selectedItems.includes(itemId) ? selectedItems : [...selectedItems, itemId]\n      );\n    },\n    deselect: ({ tree, itemId }) => {\n      const { selectedItems } = tree.getState();\n      tree.setSelectedItems(selectedItems.filter((id) => id !== itemId));\n    },\n    isSelected: ({ tree, itemId }) => {\n      const { selectedItems } = tree.getState();\n      return selectedItems.includes(itemId);\n    },\n    selectUpTo: ({ tree, item }, ctrl) => {\n      const indexA = item.getItemMeta().index;\n      const indexB = tree.getFocusedItem().getItemMeta().index;\n      const [a, b] = indexA < indexB ? [indexA, indexB] : [indexB, indexA];\n      const newSelectedItems = tree.getItems().slice(a, b + 1).map((treeItem) => treeItem.getItemMeta().itemId);\n      if (!ctrl) {\n        tree.setSelectedItems(newSelectedItems);\n        return;\n      }\n      const { selectedItems } = tree.getState();\n      const uniqueSelectedItems = [\n        .../* @__PURE__ */ new Set([...selectedItems, ...newSelectedItems])\n      ];\n      tree.setSelectedItems(uniqueSelectedItems);\n    },\n    toggleSelect: ({ item }) => {\n      if (item.isSelected()) {\n        item.deselect();\n      } else {\n        item.select();\n      }\n    },\n    getProps: ({ tree, item, prev }) => __spreadProps(__spreadValues({}, prev == null ? void 0 : prev()), {\n      \"aria-selected\": item.isSelected() ? \"true\" : \"false\",\n      onClick: (e) => {\n        var _a, _b;\n        if (e.shiftKey) {\n          item.selectUpTo(e.ctrlKey || e.metaKey);\n        } else if (e.ctrlKey || e.metaKey) {\n          item.toggleSelect();\n        } else {\n          tree.setSelectedItems([item.getItemMeta().itemId]);\n        }\n        (_b = (_a = prev == null ? void 0 : prev()) == null ? void 0 : _a.onClick) == null ? void 0 : _b.call(_a, e);\n      }\n    })\n  },\n  hotkeys: {\n    // setSelectedItem: {\n    //   hotkey: \"space\",\n    //   handler: (e, tree) => {\n    //     tree.setSelectedItems([tree.getFocusedItem().getId()]);\n    //   },\n    // },\n    toggleSelectedItem: {\n      hotkey: \"Control+Space\",\n      preventDefault: true,\n      handler: (_, tree) => {\n        tree.getFocusedItem().toggleSelect();\n      }\n    },\n    selectUpwards: {\n      hotkey: \"Shift+ArrowUp\",\n      handler: (e, tree) => {\n        const focused = tree.getFocusedItem();\n        const above = focused.getItemAbove();\n        if (!above) return;\n        if (focused.isSelected() && above.isSelected()) {\n          focused.deselect();\n        } else {\n          above.select();\n        }\n        above.setFocused();\n        tree.updateDomFocus();\n      }\n    },\n    selectDownwards: {\n      hotkey: \"Shift+ArrowDown\",\n      handler: (e, tree) => {\n        const focused = tree.getFocusedItem();\n        const below = focused.getItemBelow();\n        if (!below) return;\n        if (focused.isSelected() && below.isSelected()) {\n          focused.deselect();\n        } else {\n          below.select();\n        }\n        below.setFocused();\n        tree.updateDomFocus();\n      }\n    },\n    selectAll: {\n      hotkey: \"Control+KeyA\",\n      preventDefault: true,\n      handler: (e, tree) => {\n        tree.setSelectedItems(tree.getItems().map((item) => item.getId()));\n      }\n    }\n  }\n};\n\n// src/features/checkboxes/feature.ts\nvar getAllLoadedDescendants = (tree, itemId, includeFolders = false) => {\n  if (!tree.getConfig().isItemFolder(tree.getItemInstance(itemId))) {\n    return [itemId];\n  }\n  const descendants = tree.retrieveChildrenIds(itemId).map((child) => getAllLoadedDescendants(tree, child, includeFolders)).flat();\n  return includeFolders ? [itemId, ...descendants] : descendants;\n};\nvar checkboxesFeature = {\n  key: \"checkboxes\",\n  overwrites: [\"selection\"],\n  getInitialState: (initialState) => __spreadValues({\n    checkedItems: []\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => {\n    var _a, _b, _c;\n    const hasAsyncLoader = (_a = defaultConfig.features) == null ? void 0 : _a.some(\n      (f) => f.key === \"async-data-loader\"\n    );\n    if (hasAsyncLoader && defaultConfig.propagateCheckedState) {\n      throwError(`propagateCheckedState not supported with async trees`);\n    }\n    const propagateCheckedState = (_b = defaultConfig.propagateCheckedState) != null ? _b : !hasAsyncLoader;\n    const canCheckFolders = (_c = defaultConfig.canCheckFolders) != null ? _c : !propagateCheckedState;\n    return __spreadValues({\n      setCheckedItems: makeStateUpdater(\"checkedItems\", tree),\n      propagateCheckedState,\n      canCheckFolders\n    }, defaultConfig);\n  },\n  stateHandlerNames: {\n    checkedItems: \"setCheckedItems\"\n  },\n  treeInstance: {\n    setCheckedItems: ({ tree }, checkedItems) => {\n      tree.applySubStateUpdate(\"checkedItems\", checkedItems);\n    }\n  },\n  itemInstance: {\n    getCheckboxProps: ({ item }) => {\n      const checkedState = item.getCheckedState();\n      return {\n        onChange: item.toggleCheckedState,\n        checked: checkedState === \"checked\" /* Checked */,\n        ref: (r) => {\n          if (r) {\n            r.indeterminate = checkedState === \"indeterminate\" /* Indeterminate */;\n          }\n        }\n      };\n    },\n    toggleCheckedState: ({ item }) => {\n      if (item.getCheckedState() === \"checked\" /* Checked */) {\n        item.setUnchecked();\n      } else {\n        item.setChecked();\n      }\n    },\n    getCheckedState: ({ item, tree }) => {\n      const { checkedItems } = tree.getState();\n      const { propagateCheckedState } = tree.getConfig();\n      const itemId = item.getId();\n      if (checkedItems.includes(itemId)) {\n        return \"checked\" /* Checked */;\n      }\n      if (item.isFolder() && propagateCheckedState) {\n        const descendants = getAllLoadedDescendants(tree, itemId);\n        if (descendants.every((d) => checkedItems.includes(d))) {\n          return \"checked\" /* Checked */;\n        }\n        if (descendants.some((d) => checkedItems.includes(d))) {\n          return \"indeterminate\" /* Indeterminate */;\n        }\n      }\n      return \"unchecked\" /* Unchecked */;\n    },\n    setChecked: ({ item, tree, itemId }) => {\n      const { propagateCheckedState, canCheckFolders } = tree.getConfig();\n      if (item.isFolder() && propagateCheckedState) {\n        tree.applySubStateUpdate(\"checkedItems\", (items) => [\n          ...items,\n          ...getAllLoadedDescendants(tree, itemId, canCheckFolders)\n        ]);\n      } else if (!item.isFolder() || canCheckFolders) {\n        tree.applySubStateUpdate(\"checkedItems\", (items) => [...items, itemId]);\n      }\n    },\n    setUnchecked: ({ item, tree, itemId }) => {\n      const { propagateCheckedState, canCheckFolders } = tree.getConfig();\n      if (item.isFolder() && propagateCheckedState) {\n        const descendants = getAllLoadedDescendants(\n          tree,\n          itemId,\n          canCheckFolders\n        );\n        tree.applySubStateUpdate(\n          \"checkedItems\",\n          (items) => items.filter((id) => !descendants.includes(id) && id !== itemId)\n        );\n      } else {\n        tree.applySubStateUpdate(\n          \"checkedItems\",\n          (items) => items.filter((id) => id !== itemId)\n        );\n      }\n    }\n  }\n};\n\n// src/features/hotkeys-core/feature.ts\nvar specialKeys = {\n  // TODO:breaking deprecate auto-lowercase\n  letter: /^Key[A-Z]$/,\n  letterornumber: /^(Key[A-Z]|Digit[0-9])$/,\n  plus: /^(NumpadAdd|Plus)$/,\n  minus: /^(NumpadSubtract|Minus)$/,\n  control: /^(ControlLeft|ControlRight)$/,\n  shift: /^(ShiftLeft|ShiftRight)$/\n};\nvar testHotkeyMatch = (pressedKeys, tree, hotkey) => {\n  const supposedKeys = hotkey.hotkey.toLowerCase().split(\"+\");\n  const doKeysMatch = supposedKeys.every((key) => {\n    if (key in specialKeys) {\n      return [...pressedKeys].some(\n        (pressedKey) => specialKeys[key].test(pressedKey)\n      );\n    }\n    const pressedKeysLowerCase = [...pressedKeys].map((k) => k.toLowerCase());\n    if (pressedKeysLowerCase.includes(key.toLowerCase())) {\n      return true;\n    }\n    if (pressedKeysLowerCase.includes(`key${key.toLowerCase()}`)) {\n      return true;\n    }\n    return false;\n  });\n  const isEnabled = !hotkey.isEnabled || hotkey.isEnabled(tree);\n  const equalCounts = pressedKeys.size === supposedKeys.length;\n  return doKeysMatch && isEnabled && equalCounts;\n};\nvar findHotkeyMatch = (pressedKeys, tree, config1, config2) => {\n  var _a;\n  return (_a = Object.entries(__spreadValues(__spreadValues({}, config1), config2)).find(\n    ([, hotkey]) => testHotkeyMatch(pressedKeys, tree, hotkey)\n  )) == null ? void 0 : _a[0];\n};\nvar hotkeysCoreFeature = {\n  key: \"hotkeys-core\",\n  onTreeMount: (tree, element) => {\n    const data = tree.getDataRef();\n    const keydown = (e) => {\n      var _a, _b;\n      const { ignoreHotkeysOnInputs, onTreeHotkey, hotkeys } = tree.getConfig();\n      if (e.target instanceof HTMLInputElement && ignoreHotkeysOnInputs) {\n        return;\n      }\n      (_b = (_a = data.current).pressedKeys) != null ? _b : _a.pressedKeys = /* @__PURE__ */ new Set();\n      const newMatch = !data.current.pressedKeys.has(e.code);\n      data.current.pressedKeys.add(e.code);\n      const hotkeyName = findHotkeyMatch(\n        data.current.pressedKeys,\n        tree,\n        tree.getHotkeyPresets(),\n        hotkeys\n      );\n      if (e.target instanceof HTMLInputElement) {\n        data.current.pressedKeys.delete(e.code);\n      }\n      if (!hotkeyName) return;\n      const hotkeyConfig = __spreadValues(__spreadValues({}, tree.getHotkeyPresets()[hotkeyName]), hotkeys == null ? void 0 : hotkeys[hotkeyName]);\n      if (!hotkeyConfig) return;\n      if (!hotkeyConfig.allowWhenInputFocused && e.target instanceof HTMLInputElement)\n        return;\n      if (!hotkeyConfig.canRepeat && !newMatch) return;\n      if (hotkeyConfig.preventDefault) e.preventDefault();\n      hotkeyConfig.handler(e, tree);\n      onTreeHotkey == null ? void 0 : onTreeHotkey(hotkeyName, e);\n    };\n    const keyup = (e) => {\n      var _a, _b;\n      (_b = (_a = data.current).pressedKeys) != null ? _b : _a.pressedKeys = /* @__PURE__ */ new Set();\n      data.current.pressedKeys.delete(e.code);\n    };\n    const reset = () => {\n      data.current.pressedKeys = /* @__PURE__ */ new Set();\n    };\n    element.addEventListener(\"keydown\", keydown);\n    document.addEventListener(\"keyup\", keyup);\n    window.addEventListener(\"focus\", reset);\n    data.current.keydownHandler = keydown;\n    data.current.keyupHandler = keyup;\n    data.current.resetHandler = reset;\n  },\n  onTreeUnmount: (tree, element) => {\n    const data = tree.getDataRef();\n    if (data.current.keyupHandler) {\n      document.removeEventListener(\"keyup\", data.current.keyupHandler);\n      delete data.current.keyupHandler;\n    }\n    if (data.current.keydownHandler) {\n      element.removeEventListener(\"keydown\", data.current.keydownHandler);\n      delete data.current.keydownHandler;\n    }\n    if (data.current.resetHandler) {\n      window.removeEventListener(\"focus\", data.current.resetHandler);\n      delete data.current.resetHandler;\n    }\n  }\n};\n\n// src/features/async-data-loader/feature.ts\nvar getDataRef = (tree) => {\n  var _a, _b, _c, _d;\n  const dataRef = tree.getDataRef();\n  (_b = (_a = dataRef.current).itemData) != null ? _b : _a.itemData = {};\n  (_d = (_c = dataRef.current).childrenIds) != null ? _d : _c.childrenIds = {};\n  return dataRef;\n};\nvar loadItemData = (tree, itemId) => __async(null, null, function* () {\n  var _a;\n  const config = tree.getConfig();\n  const dataRef = getDataRef(tree);\n  const item = yield config.dataLoader.getItem(itemId);\n  dataRef.current.itemData[itemId] = item;\n  (_a = config.onLoadedItem) == null ? void 0 : _a.call(config, itemId, item);\n  tree.applySubStateUpdate(\n    \"loadingItemData\",\n    (loadingItemData) => loadingItemData.filter((id) => id !== itemId)\n  );\n  return item;\n});\nvar loadChildrenIds = (tree, itemId) => __async(null, null, function* () {\n  var _a, _b;\n  const config = tree.getConfig();\n  const dataRef = getDataRef(tree);\n  let childrenIds;\n  if (\"getChildrenWithData\" in config.dataLoader) {\n    const children = yield config.dataLoader.getChildrenWithData(itemId);\n    childrenIds = children.map((c) => c.id);\n    dataRef.current.childrenIds[itemId] = childrenIds;\n    children.forEach(({ id, data }) => {\n      var _a2;\n      dataRef.current.itemData[id] = data;\n      (_a2 = config.onLoadedItem) == null ? void 0 : _a2.call(config, id, data);\n    });\n    (_a = config.onLoadedChildren) == null ? void 0 : _a.call(config, itemId, childrenIds);\n    tree.rebuildTree();\n    tree.applySubStateUpdate(\n      \"loadingItemData\",\n      (loadingItemData) => loadingItemData.filter((id) => !childrenIds.includes(id))\n    );\n  } else {\n    childrenIds = yield config.dataLoader.getChildren(itemId);\n    dataRef.current.childrenIds[itemId] = childrenIds;\n    (_b = config.onLoadedChildren) == null ? void 0 : _b.call(config, itemId, childrenIds);\n    tree.rebuildTree();\n  }\n  tree.applySubStateUpdate(\n    \"loadingItemChildrens\",\n    (loadingItemChildrens) => loadingItemChildrens.filter((id) => id !== itemId)\n  );\n  return childrenIds;\n});\nvar asyncDataLoaderFeature = {\n  key: \"async-data-loader\",\n  getInitialState: (initialState) => __spreadValues({\n    loadingItemData: [],\n    loadingItemChildrens: []\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setLoadingItemData: makeStateUpdater(\"loadingItemData\", tree),\n    setLoadingItemChildrens: makeStateUpdater(\"loadingItemChildrens\", tree)\n  }, defaultConfig),\n  stateHandlerNames: {\n    loadingItemData: \"setLoadingItemData\",\n    loadingItemChildrens: \"setLoadingItemChildrens\"\n  },\n  treeInstance: {\n    waitForItemDataLoaded: ({ tree }, itemId) => tree.loadItemData(itemId),\n    waitForItemChildrenLoaded: ({ tree }, itemId) => tree.loadChildrenIds(itemId),\n    loadItemData: (_0, _1) => __async(null, [_0, _1], function* ({ tree }, itemId) {\n      var _a;\n      return (_a = getDataRef(tree).current.itemData[itemId]) != null ? _a : yield loadItemData(tree, itemId);\n    }),\n    loadChildrenIds: (_0, _1) => __async(null, [_0, _1], function* ({ tree }, itemId) {\n      var _a;\n      return (_a = getDataRef(tree).current.childrenIds[itemId]) != null ? _a : yield loadChildrenIds(tree, itemId);\n    }),\n    retrieveItemData: ({ tree }, itemId, skipFetch = false) => {\n      var _a, _b;\n      const config = tree.getConfig();\n      const dataRef = getDataRef(tree);\n      if (dataRef.current.itemData[itemId]) {\n        return dataRef.current.itemData[itemId];\n      }\n      if (!tree.getState().loadingItemData.includes(itemId) && !skipFetch) {\n        tree.applySubStateUpdate(\"loadingItemData\", (loadingItemData) => [\n          ...loadingItemData,\n          itemId\n        ]);\n        loadItemData(tree, itemId);\n      }\n      return (_b = (_a = config.createLoadingItemData) == null ? void 0 : _a.call(config)) != null ? _b : null;\n    },\n    retrieveChildrenIds: ({ tree }, itemId, skipFetch = false) => {\n      const dataRef = getDataRef(tree);\n      if (dataRef.current.childrenIds[itemId]) {\n        return dataRef.current.childrenIds[itemId];\n      }\n      if (tree.getState().loadingItemChildrens.includes(itemId) || skipFetch) {\n        return [];\n      }\n      tree.applySubStateUpdate(\n        \"loadingItemChildrens\",\n        (loadingItemChildrens) => [...loadingItemChildrens, itemId]\n      );\n      loadChildrenIds(tree, itemId);\n      return [];\n    }\n  },\n  itemInstance: {\n    isLoading: ({ tree, item }) => tree.getState().loadingItemData.includes(item.getItemMeta().itemId) || tree.getState().loadingItemChildrens.includes(item.getItemMeta().itemId),\n    invalidateItemData: (_0, _1) => __async(null, [_0, _1], function* ({ tree, itemId }, optimistic) {\n      var _a;\n      if (!optimistic) {\n        (_a = getDataRef(tree).current.itemData) == null ? true : delete _a[itemId];\n        tree.applySubStateUpdate(\"loadingItemData\", (loadingItemData) => [\n          ...loadingItemData,\n          itemId\n        ]);\n      }\n      yield loadItemData(tree, itemId);\n    }),\n    invalidateChildrenIds: (_0, _1) => __async(null, [_0, _1], function* ({ tree, itemId }, optimistic) {\n      var _a;\n      if (!optimistic) {\n        (_a = getDataRef(tree).current.childrenIds) == null ? true : delete _a[itemId];\n        tree.applySubStateUpdate(\n          \"loadingItemChildrens\",\n          (loadingItemChildrens) => [...loadingItemChildrens, itemId]\n        );\n      }\n      yield loadChildrenIds(tree, itemId);\n    }),\n    updateCachedChildrenIds: ({ tree, itemId }, childrenIds) => {\n      const dataRef = tree.getDataRef();\n      dataRef.current.childrenIds[itemId] = childrenIds;\n      tree.rebuildTree();\n    },\n    updateCachedData: ({ tree, itemId }, data) => {\n      const dataRef = tree.getDataRef();\n      dataRef.current.itemData[itemId] = data;\n      tree.rebuildTree();\n    }\n  }\n};\n\n// src/features/sync-data-loader/feature.ts\nvar undefErrorMessage = \"sync dataLoader returned undefined\";\nvar promiseErrorMessage = \"sync dataLoader returned promise\";\nvar unpromise = (data) => {\n  if (!data) {\n    throw throwError(undefErrorMessage);\n  }\n  if (typeof data === \"object\" && \"then\" in data) {\n    throw throwError(promiseErrorMessage);\n  }\n  return data;\n};\nvar syncDataLoaderFeature = {\n  key: \"sync-data-loader\",\n  getInitialState: (initialState) => __spreadValues({\n    loadingItemData: [],\n    loadingItemChildrens: []\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setLoadingItemData: makeStateUpdater(\"loadingItemData\", tree),\n    setLoadingItemChildrens: makeStateUpdater(\"loadingItemChildrens\", tree)\n  }, defaultConfig),\n  stateHandlerNames: {\n    loadingItemData: \"setLoadingItemData\",\n    loadingItemChildrens: \"setLoadingItemChildrens\"\n  },\n  treeInstance: {\n    waitForItemDataLoaded: () => __async(null, null, function* () {\n    }),\n    waitForItemChildrenLoaded: () => __async(null, null, function* () {\n    }),\n    retrieveItemData: ({ tree }, itemId) => {\n      return unpromise(tree.getConfig().dataLoader.getItem(itemId));\n    },\n    retrieveChildrenIds: ({ tree }, itemId) => {\n      const { dataLoader } = tree.getConfig();\n      if (\"getChildren\" in dataLoader) {\n        return unpromise(dataLoader.getChildren(itemId));\n      }\n      return unpromise(dataLoader.getChildrenWithData(itemId)).map(\n        (c) => c.data\n      );\n    },\n    loadItemData: ({ tree }, itemId) => tree.retrieveItemData(itemId),\n    loadChildrenIds: ({ tree }, itemId) => tree.retrieveChildrenIds(itemId)\n  },\n  itemInstance: {\n    isLoading: () => false\n  }\n};\n\n// src/features/drag-and-drop/utils.ts\nvar isOrderedDragTarget = (dragTarget) => \"childIndex\" in dragTarget;\nvar canDrop = (dataTransfer, target, tree) => {\n  var _a, _b, _c;\n  const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n  const config = tree.getConfig();\n  if (draggedItems && !((_c = (_b = config.canDrop) == null ? void 0 : _b.call(config, draggedItems, target)) != null ? _c : true)) {\n    return false;\n  }\n  if (draggedItems && draggedItems.some(\n    (draggedItem) => target.item.getId() === draggedItem.getId() || target.item.isDescendentOf(draggedItem.getId())\n  )) {\n    return false;\n  }\n  if (!draggedItems && dataTransfer && config.canDropForeignDragObject && !config.canDropForeignDragObject(dataTransfer, target)) {\n    return false;\n  }\n  return true;\n};\nvar getItemDropCategory = (item) => {\n  if (item.isExpanded()) {\n    return 1 /* ExpandedFolder */;\n  }\n  const parent = item.getParent();\n  if (parent && item.getIndexInParent() === item.getItemMeta().setSize - 1) {\n    return 2 /* LastInGroup */;\n  }\n  return 0 /* Item */;\n};\nvar getInsertionIndex = (children, childIndex, draggedItems) => {\n  var _a;\n  const numberOfDragItemsBeforeTarget = (_a = children.slice(0, childIndex).reduce(\n    (counter, child) => child && (draggedItems == null ? void 0 : draggedItems.some((i) => i.getId() === child.getId())) ? ++counter : counter,\n    0\n  )) != null ? _a : 0;\n  return childIndex - numberOfDragItemsBeforeTarget;\n};\nvar getTargetPlacement = (e, item, tree, canMakeChild) => {\n  var _a, _b, _c, _d, _e;\n  const config = tree.getConfig();\n  if (!config.canReorder) {\n    return canMakeChild ? { type: 2 /* MakeChild */ } : { type: 1 /* ReorderBelow */ };\n  }\n  const bb = (_a = item.getElement()) == null ? void 0 : _a.getBoundingClientRect();\n  const topPercent = bb ? (e.clientY - bb.top) / bb.height : 0.5;\n  const leftPixels = bb ? e.clientX - bb.left : 0;\n  const targetDropCategory = getItemDropCategory(item);\n  const reorderAreaPercentage = !canMakeChild ? 0.5 : (_b = config.reorderAreaPercentage) != null ? _b : 0.3;\n  const indent = (_c = config.indent) != null ? _c : 20;\n  const makeChildType = canMakeChild ? 2 /* MakeChild */ : 1 /* ReorderBelow */;\n  if (targetDropCategory === 1 /* ExpandedFolder */) {\n    if (topPercent < reorderAreaPercentage) {\n      return { type: 0 /* ReorderAbove */ };\n    }\n    return { type: makeChildType };\n  }\n  if (targetDropCategory === 2 /* LastInGroup */) {\n    if (leftPixels < item.getItemMeta().level * indent) {\n      if (topPercent < 0.5) {\n        return { type: 0 /* ReorderAbove */ };\n      }\n      const minLevel = (_e = (_d = item.getItemBelow()) == null ? void 0 : _d.getItemMeta().level) != null ? _e : 0;\n      return {\n        type: 3 /* Reparent */,\n        reparentLevel: Math.max(minLevel, Math.floor(leftPixels / indent))\n      };\n    }\n  }\n  if (topPercent < reorderAreaPercentage) {\n    return { type: 0 /* ReorderAbove */ };\n  }\n  if (topPercent > 1 - reorderAreaPercentage) {\n    return { type: 1 /* ReorderBelow */ };\n  }\n  return { type: makeChildType };\n};\nvar getDragCode = (item, placement) => {\n  return [\n    item.getId(),\n    placement.type,\n    placement.type === 3 /* Reparent */ ? placement.reparentLevel : 0\n  ].join(\"__\");\n};\nvar getNthParent = (item, n) => {\n  if (n === item.getItemMeta().level) {\n    return item;\n  }\n  return getNthParent(item.getParent(), n);\n};\nvar getReparentTarget = (item, reparentLevel, draggedItems) => {\n  const itemMeta = item.getItemMeta();\n  const reparentedTarget = getNthParent(item, reparentLevel - 1);\n  const targetItemAbove = getNthParent(item, reparentLevel);\n  const targetIndex = targetItemAbove.getIndexInParent() + 1;\n  return {\n    item: reparentedTarget,\n    childIndex: targetIndex,\n    insertionIndex: getInsertionIndex(\n      reparentedTarget.getChildren(),\n      targetIndex,\n      draggedItems\n    ),\n    dragLineIndex: itemMeta.index + 1,\n    dragLineLevel: reparentLevel\n  };\n};\nvar getDragTarget = (e, item, tree, canReorder = tree.getConfig().canReorder) => {\n  var _a;\n  const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n  const itemMeta = item.getItemMeta();\n  const parent = item.getParent();\n  const itemTarget = { item };\n  const parentTarget = parent ? { item: parent } : null;\n  const canBecomeSibling = parentTarget && canDrop(e.dataTransfer, parentTarget, tree);\n  const canMakeChild = canDrop(e.dataTransfer, itemTarget, tree);\n  const placement = getTargetPlacement(e, item, tree, canMakeChild);\n  if (!canReorder && parent && canBecomeSibling && placement.type !== 2 /* MakeChild */) {\n    if (draggedItems == null ? void 0 : draggedItems.some((item2) => item2.isDescendentOf(parent.getId()))) {\n      return itemTarget;\n    }\n    return parentTarget;\n  }\n  if (!canReorder && parent && !canBecomeSibling) {\n    return getDragTarget(e, parent, tree, false);\n  }\n  if (!parent) {\n    return itemTarget;\n  }\n  if (placement.type === 2 /* MakeChild */) {\n    return itemTarget;\n  }\n  if (!canBecomeSibling) {\n    return getDragTarget(e, parent, tree, false);\n  }\n  if (placement.type === 3 /* Reparent */) {\n    return getReparentTarget(item, placement.reparentLevel, draggedItems);\n  }\n  const maybeAddOneForBelow = placement.type === 0 /* ReorderAbove */ ? 0 : 1;\n  const childIndex = item.getIndexInParent() + maybeAddOneForBelow;\n  return {\n    item: parent,\n    dragLineIndex: itemMeta.index + maybeAddOneForBelow,\n    dragLineLevel: itemMeta.level,\n    childIndex,\n    // TODO performance could be improved by computing this only when dragcode changed\n    insertionIndex: getInsertionIndex(\n      parent.getChildren(),\n      childIndex,\n      draggedItems\n    )\n  };\n};\n\n// src/features/drag-and-drop/feature.ts\nvar handleAutoOpenFolder = (dataRef, tree, item, placement) => {\n  const { openOnDropDelay } = tree.getConfig();\n  const dragCode = dataRef.current.lastDragCode;\n  if (!openOnDropDelay || !item.isFolder() || item.isExpanded() || placement.type !== 2 /* MakeChild */) {\n    return;\n  }\n  clearTimeout(dataRef.current.autoExpandTimeout);\n  dataRef.current.autoExpandTimeout = setTimeout(() => {\n    if (dragCode !== dataRef.current.lastDragCode || !dataRef.current.lastAllowDrop)\n      return;\n    item.expand();\n  }, openOnDropDelay);\n};\nvar defaultCanDropForeignDragObject = () => false;\nvar dragAndDropFeature = {\n  key: \"drag-and-drop\",\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    canDrop: (_, target) => target.item.isFolder(),\n    canDropForeignDragObject: defaultCanDropForeignDragObject,\n    canDragForeignDragObjectOver: defaultConfig.canDropForeignDragObject !== defaultCanDropForeignDragObject ? (dataTransfer) => dataTransfer.effectAllowed !== \"none\" : () => false,\n    setDndState: makeStateUpdater(\"dnd\", tree),\n    canReorder: true,\n    openOnDropDelay: 800\n  }, defaultConfig),\n  stateHandlerNames: {\n    dnd: \"setDndState\"\n  },\n  onTreeMount: (tree) => {\n    const listener = () => {\n      tree.applySubStateUpdate(\"dnd\", null);\n    };\n    tree.getDataRef().current.windowDragEndListener = listener;\n    window.addEventListener(\"dragend\", listener);\n  },\n  onTreeUnmount: (tree) => {\n    const { windowDragEndListener } = tree.getDataRef().current;\n    if (!windowDragEndListener) return;\n    window.removeEventListener(\"dragend\", windowDragEndListener);\n  },\n  treeInstance: {\n    getDragTarget: ({ tree }) => {\n      var _a, _b;\n      return (_b = (_a = tree.getState().dnd) == null ? void 0 : _a.dragTarget) != null ? _b : null;\n    },\n    getDragLineData: ({ tree }) => {\n      var _a, _b, _c, _d, _e, _f;\n      const target = tree.getDragTarget();\n      const indent = ((_a = target == null ? void 0 : target.item.getItemMeta().level) != null ? _a : 0) + 1;\n      const treeBb = (_b = tree.getElement()) == null ? void 0 : _b.getBoundingClientRect();\n      if (!target || !treeBb || !isOrderedDragTarget(target)) return null;\n      const leftOffset = target.dragLineLevel * ((_c = tree.getConfig().indent) != null ? _c : 1);\n      const targetItem = tree.getItems()[target.dragLineIndex];\n      if (!targetItem) {\n        const bb2 = (_e = (_d = tree.getItems()[target.dragLineIndex - 1]) == null ? void 0 : _d.getElement()) == null ? void 0 : _e.getBoundingClientRect();\n        if (bb2) {\n          return {\n            indent,\n            top: bb2.bottom - treeBb.top,\n            left: bb2.left + leftOffset - treeBb.left,\n            width: bb2.width - leftOffset\n          };\n        }\n      }\n      const bb = (_f = targetItem == null ? void 0 : targetItem.getElement()) == null ? void 0 : _f.getBoundingClientRect();\n      if (bb) {\n        return {\n          indent,\n          top: bb.top - treeBb.top,\n          left: bb.left + leftOffset - treeBb.left,\n          width: bb.width - leftOffset\n        };\n      }\n      return null;\n    },\n    getDragLineStyle: ({ tree }, topOffset = -1, leftOffset = -8) => {\n      const dragLine = tree.getDragLineData();\n      return dragLine ? {\n        position: \"absolute\",\n        top: `${dragLine.top + topOffset}px`,\n        left: `${dragLine.left + leftOffset}px`,\n        width: `${dragLine.width - leftOffset}px`,\n        pointerEvents: \"none\"\n        // important to prevent capturing drag events\n      } : { display: \"none\" };\n    },\n    getContainerProps: ({ prev, tree }, treeLabel) => {\n      const prevProps = prev == null ? void 0 : prev(treeLabel);\n      return __spreadProps(__spreadValues({}, prevProps), {\n        onDragOver: (e) => {\n          e.preventDefault();\n        },\n        onDrop: (e) => __async(null, null, function* () {\n          var _a, _b, _c;\n          const dataRef = tree.getDataRef();\n          const target = { item: tree.getRootItem() };\n          if (!canDrop(e.dataTransfer, target, tree)) {\n            return;\n          }\n          e.preventDefault();\n          const config = tree.getConfig();\n          const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n          dataRef.current.lastDragCode = void 0;\n          if (draggedItems) {\n            yield (_b = config.onDrop) == null ? void 0 : _b.call(config, draggedItems, target);\n          } else if (e.dataTransfer) {\n            yield (_c = config.onDropForeignDragObject) == null ? void 0 : _c.call(config, e.dataTransfer, target);\n          }\n        }),\n        style: __spreadProps(__spreadValues({}, prevProps == null ? void 0 : prevProps.style), {\n          position: \"relative\"\n        })\n      });\n    }\n  },\n  itemInstance: {\n    getProps: ({ tree, item, prev }) => __spreadProps(__spreadValues({}, prev == null ? void 0 : prev()), {\n      draggable: true,\n      onDragEnter: (e) => e.preventDefault(),\n      onDragStart: (e) => {\n        var _a, _b, _c, _d;\n        const selectedItems = tree.getSelectedItems ? tree.getSelectedItems() : [tree.getFocusedItem()];\n        const items = selectedItems.includes(item) ? selectedItems : [item];\n        const config = tree.getConfig();\n        if (!selectedItems.includes(item)) {\n          (_a = tree.setSelectedItems) == null ? void 0 : _a.call(tree, [item.getItemMeta().itemId]);\n        }\n        if (!((_c = (_b = config.canDrag) == null ? void 0 : _b.call(config, items)) != null ? _c : true)) {\n          e.preventDefault();\n          return;\n        }\n        if (config.setDragImage) {\n          const { imgElement, xOffset, yOffset } = config.setDragImage(items);\n          (_d = e.dataTransfer) == null ? void 0 : _d.setDragImage(imgElement, xOffset != null ? xOffset : 0, yOffset != null ? yOffset : 0);\n        }\n        if (config.createForeignDragObject && e.dataTransfer) {\n          const { format, data, dropEffect, effectAllowed } = config.createForeignDragObject(items);\n          e.dataTransfer.setData(format, data);\n          if (dropEffect) e.dataTransfer.dropEffect = dropEffect;\n          if (effectAllowed) e.dataTransfer.effectAllowed = effectAllowed;\n        }\n        tree.applySubStateUpdate(\"dnd\", {\n          draggedItems: items,\n          draggingOverItem: tree.getFocusedItem()\n        });\n      },\n      onDragOver: (e) => {\n        var _a, _b, _c;\n        e.stopPropagation();\n        const dataRef = tree.getDataRef();\n        const placement = getTargetPlacement(e, item, tree, true);\n        const nextDragCode = getDragCode(item, placement);\n        if (nextDragCode === dataRef.current.lastDragCode) {\n          if (dataRef.current.lastAllowDrop) {\n            e.preventDefault();\n          }\n          return;\n        }\n        dataRef.current.lastDragCode = nextDragCode;\n        dataRef.current.lastDragEnter = Date.now();\n        handleAutoOpenFolder(dataRef, tree, item, placement);\n        const target = getDragTarget(e, item, tree);\n        if (!((_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems) && (!e.dataTransfer || !((_c = (_b = tree.getConfig()).canDragForeignDragObjectOver) == null ? void 0 : _c.call(_b, e.dataTransfer, target)))) {\n          dataRef.current.lastAllowDrop = false;\n          return;\n        }\n        if (!canDrop(e.dataTransfer, target, tree)) {\n          dataRef.current.lastAllowDrop = false;\n          return;\n        }\n        tree.applySubStateUpdate(\"dnd\", (state) => __spreadProps(__spreadValues({}, state), {\n          dragTarget: target,\n          draggingOverItem: item\n        }));\n        dataRef.current.lastAllowDrop = true;\n        e.preventDefault();\n      },\n      onDragLeave: () => {\n        setTimeout(() => {\n          var _a;\n          const dataRef = tree.getDataRef();\n          if (((_a = dataRef.current.lastDragEnter) != null ? _a : 0) + 100 >= Date.now()) return;\n          dataRef.current.lastDragCode = \"no-drag\";\n          tree.applySubStateUpdate(\"dnd\", (state) => __spreadProps(__spreadValues({}, state), {\n            draggingOverItem: void 0,\n            dragTarget: void 0\n          }));\n        }, 100);\n      },\n      onDragEnd: (e) => {\n        var _a, _b;\n        const { onCompleteForeignDrop, canDragForeignDragObjectOver } = tree.getConfig();\n        const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n        if (((_b = e.dataTransfer) == null ? void 0 : _b.dropEffect) === \"none\" || !draggedItems) {\n          return;\n        }\n        const target = getDragTarget(e, item, tree);\n        if (canDragForeignDragObjectOver && e.dataTransfer && !canDragForeignDragObjectOver(e.dataTransfer, target)) {\n          return;\n        }\n        onCompleteForeignDrop == null ? void 0 : onCompleteForeignDrop(draggedItems);\n      },\n      onDrop: (e) => __async(null, null, function* () {\n        var _a, _b, _c;\n        e.stopPropagation();\n        const dataRef = tree.getDataRef();\n        const target = getDragTarget(e, item, tree);\n        const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n        const isValidDrop = canDrop(e.dataTransfer, target, tree);\n        tree.applySubStateUpdate(\"dnd\", {\n          draggedItems: void 0,\n          draggingOverItem: void 0,\n          dragTarget: void 0\n        });\n        if (!isValidDrop) {\n          return;\n        }\n        e.preventDefault();\n        const config = tree.getConfig();\n        dataRef.current.lastDragCode = void 0;\n        if (draggedItems) {\n          yield (_b = config.onDrop) == null ? void 0 : _b.call(config, draggedItems, target);\n        } else if (e.dataTransfer) {\n          yield (_c = config.onDropForeignDragObject) == null ? void 0 : _c.call(config, e.dataTransfer, target);\n        }\n      })\n    }),\n    isDragTarget: ({ tree, item }) => {\n      const target = tree.getDragTarget();\n      return target ? target.item.getId() === item.getId() : false;\n    },\n    isDragTargetAbove: ({ tree, item }) => {\n      const target = tree.getDragTarget();\n      if (!target || !isOrderedDragTarget(target) || target.item !== item.getParent())\n        return false;\n      return target.childIndex === item.getItemMeta().posInSet;\n    },\n    isDragTargetBelow: ({ tree, item }) => {\n      const target = tree.getDragTarget();\n      if (!target || !isOrderedDragTarget(target) || target.item !== item.getParent())\n        return false;\n      return target.childIndex - 1 === item.getItemMeta().posInSet;\n    },\n    isDraggingOver: ({ tree, item }) => {\n      var _a, _b;\n      return ((_b = (_a = tree.getState().dnd) == null ? void 0 : _a.draggingOverItem) == null ? void 0 : _b.getId()) === item.getId();\n    }\n  }\n};\n\n// src/features/keyboard-drag-and-drop/feature.ts\nvar getNextDragTarget = (tree, isUp, dragTarget) => {\n  var _a, _b, _c, _d;\n  const direction = isUp ? 0 : 1;\n  const draggedItems = (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems;\n  if (isOrderedDragTarget(dragTarget)) {\n    const parent = dragTarget.item.getParent();\n    const targetedItem = tree.getItems()[dragTarget.dragLineIndex - 1];\n    const targetCategory = targetedItem ? getItemDropCategory(targetedItem) : 0 /* Item */;\n    const maxLevel = (_b = targetedItem == null ? void 0 : targetedItem.getItemMeta().level) != null ? _b : 0;\n    const minLevel = (_d = (_c = targetedItem == null ? void 0 : targetedItem.getItemBelow()) == null ? void 0 : _c.getItemMeta().level) != null ? _d : 0;\n    if (targetCategory === 2 /* LastInGroup */) {\n      if (isUp && dragTarget.dragLineLevel < maxLevel) {\n        return getReparentTarget(\n          targetedItem,\n          dragTarget.dragLineLevel + 1,\n          draggedItems\n        );\n      }\n      if (!isUp && dragTarget.dragLineLevel > minLevel && parent) {\n        return getReparentTarget(\n          targetedItem,\n          dragTarget.dragLineLevel - 1,\n          draggedItems\n        );\n      }\n    }\n    const newIndex = dragTarget.dragLineIndex - 1 + direction;\n    const item = tree.getItems()[newIndex];\n    return item ? { item } : void 0;\n  }\n  const targetingExpandedFolder = getItemDropCategory(dragTarget.item) === 1 /* ExpandedFolder */;\n  if (targetingExpandedFolder && !isUp) {\n    return {\n      item: dragTarget.item,\n      childIndex: 0,\n      insertionIndex: getInsertionIndex(\n        dragTarget.item.getChildren(),\n        0,\n        draggedItems\n      ),\n      dragLineIndex: dragTarget.item.getItemMeta().index + direction,\n      dragLineLevel: dragTarget.item.getItemMeta().level + 1\n    };\n  }\n  const childIndex = dragTarget.item.getIndexInParent() + direction;\n  return {\n    item: dragTarget.item.getParent(),\n    childIndex,\n    insertionIndex: getInsertionIndex(\n      dragTarget.item.getParent().getChildren(),\n      childIndex,\n      draggedItems\n    ),\n    dragLineIndex: dragTarget.item.getItemMeta().index + direction,\n    dragLineLevel: dragTarget.item.getItemMeta().level\n  };\n};\nvar getNextValidDragTarget = (tree, isUp, previousTarget = ((_a) => (_a = tree.getState().dnd) == null ? void 0 : _a.dragTarget)()) => {\n  var _a2;\n  if (!previousTarget) return void 0;\n  const nextTarget = getNextDragTarget(tree, isUp, previousTarget);\n  const dataTransfer = (_a2 = tree.getDataRef().current.kDndDataTransfer) != null ? _a2 : null;\n  if (!nextTarget) return void 0;\n  if (canDrop(dataTransfer, nextTarget, tree)) {\n    return nextTarget;\n  }\n  return getNextValidDragTarget(tree, isUp, nextTarget);\n};\nvar updateScroll = (tree) => {\n  const state = tree.getState().dnd;\n  if (!(state == null ? void 0 : state.dragTarget) || isOrderedDragTarget(state.dragTarget)) return;\n  state.dragTarget.item.scrollTo({ block: \"nearest\", inline: \"nearest\" });\n};\nvar initiateDrag = (tree, draggedItems, dataTransfer) => {\n  var _a, _b;\n  const focusedItem = tree.getFocusedItem();\n  const { canDrag } = tree.getConfig();\n  if (draggedItems && canDrag && !canDrag(draggedItems)) {\n    return;\n  }\n  if (draggedItems) {\n    tree.applySubStateUpdate(\"dnd\", { draggedItems });\n    (_b = (_a = tree.getConfig()).onStartKeyboardDrag) == null ? void 0 : _b.call(_a, draggedItems);\n  } else if (dataTransfer) {\n    tree.getDataRef().current.kDndDataTransfer = dataTransfer;\n  }\n  const dragTarget = getNextValidDragTarget(tree, false, {\n    item: focusedItem\n  });\n  if (!dragTarget) return;\n  tree.applySubStateUpdate(\"dnd\", {\n    draggedItems,\n    dragTarget\n  });\n  tree.applySubStateUpdate(\"assistiveDndState\", 1 /* Started */);\n  updateScroll(tree);\n};\nvar moveDragPosition = (tree, isUp) => {\n  var _a;\n  const dragTarget = getNextValidDragTarget(tree, isUp);\n  if (!dragTarget) return;\n  tree.applySubStateUpdate(\"dnd\", {\n    draggedItems: (_a = tree.getState().dnd) == null ? void 0 : _a.draggedItems,\n    dragTarget\n  });\n  tree.applySubStateUpdate(\"assistiveDndState\", 2 /* Dragging */);\n  if (!isOrderedDragTarget(dragTarget)) {\n    dragTarget.item.setFocused();\n  }\n  updateScroll(tree);\n};\nvar keyboardDragAndDropFeature = {\n  key: \"keyboard-drag-and-drop\",\n  deps: [\"drag-and-drop\"],\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setAssistiveDndState: makeStateUpdater(\"assistiveDndState\", tree)\n  }, defaultConfig),\n  stateHandlerNames: {\n    assistiveDndState: \"setAssistiveDndState\"\n  },\n  treeInstance: {\n    startKeyboardDrag: ({ tree }, draggedItems) => {\n      initiateDrag(tree, draggedItems, void 0);\n    },\n    startKeyboardDragOnForeignObject: ({ tree }, dataTransfer) => {\n      initiateDrag(tree, void 0, dataTransfer);\n    },\n    stopKeyboardDrag: ({ tree }) => {\n      tree.getDataRef().current.kDndDataTransfer = void 0;\n      tree.applySubStateUpdate(\"dnd\", null);\n      tree.applySubStateUpdate(\"assistiveDndState\", 0 /* None */);\n    }\n  },\n  hotkeys: {\n    startDrag: {\n      hotkey: \"Control+Shift+KeyD\",\n      preventDefault: true,\n      isEnabled: (tree) => !tree.getState().dnd,\n      handler: (_, tree) => {\n        var _a, _b;\n        const selectedItems = (_b = (_a = tree.getSelectedItems) == null ? void 0 : _a.call(tree)) != null ? _b : [\n          tree.getFocusedItem()\n        ];\n        const focusedItem = tree.getFocusedItem();\n        tree.startKeyboardDrag(\n          selectedItems.includes(focusedItem) ? selectedItems : selectedItems.concat(focusedItem)\n        );\n      }\n    },\n    dragUp: {\n      hotkey: \"ArrowUp\",\n      preventDefault: true,\n      isEnabled: (tree) => !!tree.getState().dnd,\n      handler: (_, tree) => {\n        moveDragPosition(tree, true);\n      }\n    },\n    dragDown: {\n      hotkey: \"ArrowDown\",\n      preventDefault: true,\n      isEnabled: (tree) => !!tree.getState().dnd,\n      handler: (_, tree) => {\n        moveDragPosition(tree, false);\n      }\n    },\n    cancelDrag: {\n      hotkey: \"Escape\",\n      isEnabled: (tree) => !!tree.getState().dnd,\n      handler: (_, tree) => {\n        tree.stopKeyboardDrag();\n      }\n    },\n    completeDrag: {\n      hotkey: \"Enter\",\n      preventDefault: true,\n      isEnabled: (tree) => !!tree.getState().dnd,\n      handler: (e, tree) => __async(null, null, function* () {\n        var _a, _b, _c, _d;\n        e.stopPropagation();\n        const dataRef = tree.getDataRef();\n        const target = tree.getDragTarget();\n        const dataTransfer = (_a = dataRef.current.kDndDataTransfer) != null ? _a : null;\n        if (!target || !canDrop(dataTransfer, target, tree)) {\n          return;\n        }\n        const config = tree.getConfig();\n        const draggedItems = (_b = tree.getState().dnd) == null ? void 0 : _b.draggedItems;\n        dataRef.current.lastDragCode = void 0;\n        tree.applySubStateUpdate(\"dnd\", null);\n        if (draggedItems) {\n          yield (_c = config.onDrop) == null ? void 0 : _c.call(config, draggedItems, target);\n          tree.getItemInstance(draggedItems[0].getId()).setFocused();\n        } else if (dataTransfer) {\n          yield (_d = config.onDropForeignDragObject) == null ? void 0 : _d.call(config, dataTransfer, target);\n        }\n        tree.applySubStateUpdate(\n          \"assistiveDndState\",\n          3 /* Completed */\n        );\n      })\n    }\n  }\n};\n\n// src/features/search/feature.ts\nvar searchFeature = {\n  key: \"search\",\n  getInitialState: (initialState) => __spreadValues({\n    search: null\n  }, initialState),\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setSearch: makeStateUpdater(\"search\", tree),\n    isSearchMatchingItem: (search, item) => search.length > 0 && item.getItemName().toLowerCase().includes(search.toLowerCase())\n  }, defaultConfig),\n  stateHandlerNames: {\n    search: \"setSearch\"\n  },\n  treeInstance: {\n    setSearch: ({ tree }, search) => {\n      var _a;\n      tree.applySubStateUpdate(\"search\", search);\n      (_a = tree.getItems().find(\n        (item) => {\n          var _a2, _b;\n          return (_b = (_a2 = tree.getConfig()).isSearchMatchingItem) == null ? void 0 : _b.call(_a2, tree.getSearchValue(), item);\n        }\n      )) == null ? void 0 : _a.setFocused();\n    },\n    openSearch: ({ tree }, initialValue = \"\") => {\n      var _a, _b;\n      tree.setSearch(initialValue);\n      (_b = (_a = tree.getConfig()).onOpenSearch) == null ? void 0 : _b.call(_a);\n      setTimeout(() => {\n        var _a2;\n        (_a2 = tree.getDataRef().current.searchInput) == null ? void 0 : _a2.focus();\n      });\n    },\n    closeSearch: ({ tree }) => {\n      var _a, _b;\n      tree.setSearch(null);\n      (_b = (_a = tree.getConfig()).onCloseSearch) == null ? void 0 : _b.call(_a);\n      tree.updateDomFocus();\n    },\n    isSearchOpen: ({ tree }) => tree.getState().search !== null,\n    getSearchValue: ({ tree }) => tree.getState().search || \"\",\n    registerSearchInputElement: ({ tree }, element) => {\n      const dataRef = tree.getDataRef();\n      dataRef.current.searchInput = element;\n      if (element && dataRef.current.keydownHandler) {\n        element.addEventListener(\"keydown\", dataRef.current.keydownHandler);\n      }\n    },\n    getSearchInputElement: ({ tree }) => {\n      var _a;\n      return (_a = tree.getDataRef().current.searchInput) != null ? _a : null;\n    },\n    // TODO memoize with propMemoizationFeature\n    getSearchInputElementProps: ({ tree }) => ({\n      value: tree.getSearchValue(),\n      onChange: (e) => tree.setSearch(e.target.value),\n      onBlur: () => tree.closeSearch(),\n      ref: tree.registerSearchInputElement\n    }),\n    getSearchMatchingItems: memo(\n      ({ tree }) => [\n        tree.getSearchValue(),\n        tree.getItems(),\n        tree.getConfig().isSearchMatchingItem\n      ],\n      (search, items, isSearchMatchingItem) => items.filter((item) => search && (isSearchMatchingItem == null ? void 0 : isSearchMatchingItem(search, item)))\n    )\n  },\n  itemInstance: {\n    isMatchingSearch: ({ tree, item }) => tree.getSearchMatchingItems().some((i) => i.getId() === item.getId())\n  },\n  hotkeys: {\n    openSearch: {\n      hotkey: \"LetterOrNumber\",\n      preventDefault: true,\n      // TODO make true default\n      isEnabled: (tree) => !tree.isSearchOpen(),\n      handler: (e, tree) => {\n        e.stopPropagation();\n        tree.openSearch(e.key);\n      }\n    },\n    closeSearch: {\n      // TODO allow multiple, i.e. Enter\n      hotkey: \"Escape\",\n      allowWhenInputFocused: true,\n      isEnabled: (tree) => tree.isSearchOpen(),\n      handler: (e, tree) => {\n        tree.closeSearch();\n      }\n    },\n    submitSearch: {\n      hotkey: \"Enter\",\n      allowWhenInputFocused: true,\n      isEnabled: (tree) => tree.isSearchOpen(),\n      handler: (e, tree) => {\n        tree.closeSearch();\n        tree.setSelectedItems([tree.getFocusedItem().getId()]);\n      }\n    },\n    nextSearchItem: {\n      hotkey: \"ArrowDown\",\n      allowWhenInputFocused: true,\n      canRepeat: true,\n      isEnabled: (tree) => tree.isSearchOpen(),\n      handler: (e, tree) => {\n        const focusItem = tree.getSearchMatchingItems().find(\n          (item) => item.getItemMeta().index > tree.getFocusedItem().getItemMeta().index\n        );\n        focusItem == null ? void 0 : focusItem.setFocused();\n        focusItem == null ? void 0 : focusItem.scrollTo({ block: \"nearest\", inline: \"nearest\" });\n      }\n    },\n    previousSearchItem: {\n      hotkey: \"ArrowUp\",\n      allowWhenInputFocused: true,\n      canRepeat: true,\n      isEnabled: (tree) => tree.isSearchOpen(),\n      handler: (e, tree) => {\n        const focusItem = [...tree.getSearchMatchingItems()].reverse().find(\n          (item) => item.getItemMeta().index < tree.getFocusedItem().getItemMeta().index\n        );\n        focusItem == null ? void 0 : focusItem.setFocused();\n        focusItem == null ? void 0 : focusItem.scrollTo({ block: \"nearest\", inline: \"nearest\" });\n      }\n    }\n  }\n};\n\n// src/features/renaming/feature.ts\nvar renamingFeature = {\n  key: \"renaming\",\n  overwrites: [\"drag-and-drop\"],\n  getDefaultConfig: (defaultConfig, tree) => __spreadValues({\n    setRenamingItem: makeStateUpdater(\"renamingItem\", tree),\n    setRenamingValue: makeStateUpdater(\"renamingValue\", tree),\n    canRename: () => true\n  }, defaultConfig),\n  stateHandlerNames: {\n    renamingItem: \"setRenamingItem\",\n    renamingValue: \"setRenamingValue\"\n  },\n  treeInstance: {\n    getRenamingItem: ({ tree }) => {\n      const itemId = tree.getState().renamingItem;\n      return itemId ? tree.getItemInstance(itemId) : null;\n    },\n    getRenamingValue: ({ tree }) => tree.getState().renamingValue || \"\",\n    abortRenaming: ({ tree }) => {\n      tree.applySubStateUpdate(\"renamingItem\", null);\n      tree.updateDomFocus();\n    },\n    completeRenaming: ({ tree }) => {\n      var _a;\n      const config = tree.getConfig();\n      const item = tree.getRenamingItem();\n      if (item) {\n        (_a = config.onRename) == null ? void 0 : _a.call(config, item, tree.getState().renamingValue || \"\");\n      }\n      tree.applySubStateUpdate(\"renamingItem\", null);\n      tree.updateDomFocus();\n    },\n    isRenamingItem: ({ tree }) => !!tree.getState().renamingItem\n  },\n  itemInstance: {\n    startRenaming: ({ tree, item, itemId }) => {\n      if (!item.canRename()) {\n        return;\n      }\n      tree.applySubStateUpdate(\"renamingItem\", itemId);\n      tree.applySubStateUpdate(\"renamingValue\", item.getItemName());\n    },\n    getRenameInputProps: ({ tree }) => ({\n      ref: (r) => r == null ? void 0 : r.focus(),\n      onBlur: () => tree.abortRenaming(),\n      value: tree.getRenamingValue(),\n      onChange: (e) => {\n        var _a;\n        tree.applySubStateUpdate(\"renamingValue\", (_a = e.target) == null ? void 0 : _a.value);\n      }\n    }),\n    canRename: ({ tree, item }) => {\n      var _a, _b, _c;\n      return (_c = (_b = (_a = tree.getConfig()).canRename) == null ? void 0 : _b.call(_a, item)) != null ? _c : true;\n    },\n    isRenaming: ({ tree, item }) => item.getId() === tree.getState().renamingItem,\n    getProps: ({ prev, item }) => {\n      var _a;\n      const isRenaming = item.isRenaming();\n      const prevProps = (_a = prev == null ? void 0 : prev()) != null ? _a : {};\n      return isRenaming ? __spreadProps(__spreadValues({}, prevProps), {\n        draggable: false,\n        onDragStart: () => {\n        }\n      }) : prevProps;\n    }\n  },\n  hotkeys: {\n    renameItem: {\n      hotkey: \"F2\",\n      handler: (e, tree) => {\n        tree.getFocusedItem().startRenaming();\n      }\n    },\n    abortRenaming: {\n      hotkey: \"Escape\",\n      allowWhenInputFocused: true,\n      isEnabled: (tree) => tree.isRenamingItem(),\n      handler: (e, tree) => {\n        tree.abortRenaming();\n      }\n    },\n    completeRenaming: {\n      hotkey: \"Enter\",\n      allowWhenInputFocused: true,\n      isEnabled: (tree) => tree.isRenamingItem(),\n      handler: (e, tree) => {\n        tree.completeRenaming();\n      }\n    }\n  }\n};\n\n// src/features/expand-all/feature.ts\nvar expandAllFeature = {\n  key: \"expand-all\",\n  treeInstance: {\n    expandAll: (_0, _1) => __async(null, [_0, _1], function* ({ tree }, cancelToken) {\n      yield Promise.all(\n        tree.getItems().map((item) => item.expandAll(cancelToken))\n      );\n    }),\n    collapseAll: ({ tree }) => {\n      tree.applySubStateUpdate(\"expandedItems\", []);\n      tree.rebuildTree();\n    }\n  },\n  itemInstance: {\n    expandAll: (_0, _1) => __async(null, [_0, _1], function* ({ tree, item }, cancelToken) {\n      if (cancelToken == null ? void 0 : cancelToken.current) {\n        return;\n      }\n      if (!item.isFolder()) {\n        return;\n      }\n      item.expand();\n      yield tree.waitForItemChildrenLoaded(item.getId());\n      yield Promise.all(\n        item.getChildren().map((child) => __async(null, null, function* () {\n          yield tree.waitForItemChildrenLoaded(item.getId());\n          yield child == null ? void 0 : child.expandAll(cancelToken);\n        }))\n      );\n    }),\n    collapseAll: ({ item }) => {\n      if (!item.isExpanded()) return;\n      for (const child of item.getChildren()) {\n        child == null ? void 0 : child.collapseAll();\n      }\n      item.collapse();\n    }\n  },\n  hotkeys: {\n    expandSelected: {\n      hotkey: \"Control+Shift+Plus\",\n      handler: (_, tree) => __async(null, null, function* () {\n        const cancelToken = { current: false };\n        const cancelHandler = (e) => {\n          if (e.code === \"Escape\") {\n            cancelToken.current = true;\n          }\n        };\n        document.addEventListener(\"keydown\", cancelHandler);\n        yield Promise.all(\n          tree.getSelectedItems().map((item) => item.expandAll(cancelToken))\n        );\n        document.removeEventListener(\"keydown\", cancelHandler);\n      })\n    },\n    collapseSelected: {\n      hotkey: \"Control+Shift+Minus\",\n      handler: (_, tree) => {\n        tree.getSelectedItems().forEach((item) => item.collapseAll());\n      }\n    }\n  }\n};\n\n// src/features/prop-memoization/feature.ts\nvar memoize = (props, memoizedProps) => {\n  for (const key in props) {\n    if (typeof props[key] === \"function\") {\n      if (memoizedProps && key in memoizedProps) {\n        props[key] = memoizedProps[key];\n      } else {\n        memoizedProps[key] = props[key];\n      }\n    }\n  }\n  return props;\n};\nvar propMemoizationFeature = {\n  key: \"prop-memoization\",\n  overwrites: [\n    \"main\",\n    \"async-data-loader\",\n    \"sync-data-loader\",\n    \"drag-and-drop\",\n    \"expand-all\",\n    \"hotkeys-core\",\n    \"renaming\",\n    \"search\",\n    \"selection\"\n  ],\n  treeInstance: {\n    getContainerProps: ({ tree, prev }, treeLabel) => {\n      var _a, _b, _c, _d, _e;\n      const dataRef = tree.getDataRef();\n      const props = (_a = prev == null ? void 0 : prev(treeLabel)) != null ? _a : {};\n      (_c = (_b = dataRef.current).memo) != null ? _c : _b.memo = {};\n      (_e = (_d = dataRef.current.memo).tree) != null ? _e : _d.tree = {};\n      return memoize(props, dataRef.current.memo.tree);\n    },\n    getSearchInputElementProps: ({ tree, prev }) => {\n      var _a, _b, _c, _d, _e;\n      const dataRef = tree.getDataRef();\n      const props = (_a = prev == null ? void 0 : prev()) != null ? _a : {};\n      (_c = (_b = dataRef.current).memo) != null ? _c : _b.memo = {};\n      (_e = (_d = dataRef.current.memo).search) != null ? _e : _d.search = {};\n      return memoize(props, dataRef.current.memo.search);\n    }\n  },\n  itemInstance: {\n    getProps: ({ item, prev }) => {\n      var _a, _b, _c, _d, _e;\n      const dataRef = item.getDataRef();\n      const props = (_a = prev == null ? void 0 : prev()) != null ? _a : {};\n      (_c = (_b = dataRef.current).memo) != null ? _c : _b.memo = {};\n      (_e = (_d = dataRef.current.memo).item) != null ? _e : _d.item = {};\n      return memoize(props, dataRef.current.memo.item);\n    },\n    getRenameInputProps: ({ item, prev }) => {\n      var _a, _b, _c, _d, _e;\n      const dataRef = item.getDataRef();\n      const props = (_a = prev == null ? void 0 : prev()) != null ? _a : {};\n      (_c = (_b = dataRef.current).memo) != null ? _c : _b.memo = {};\n      (_e = (_d = dataRef.current.memo).rename) != null ? _e : _d.rename = {};\n      return memoize(props, dataRef.current.memo.rename);\n    }\n  }\n};\n\n// src/utilities/remove-items-from-parents.ts\nvar removeItemsFromParents = (movedItems, onChangeChildren) => __async(null, null, function* () {\n  const movedItemsIds = movedItems.map((item) => item.getId());\n  const uniqueParents = [\n    ...new Set(movedItems.map((item) => item.getParent()))\n  ];\n  for (const parent of uniqueParents) {\n    const siblings = parent == null ? void 0 : parent.getChildren();\n    if (siblings && parent) {\n      const newChildren = siblings.filter((sibling) => !movedItemsIds.includes(sibling.getId())).map((i) => i.getId());\n      yield onChangeChildren(parent, newChildren);\n      if (parent && \"updateCachedChildrenIds\" in parent) {\n        parent == null ? void 0 : parent.updateCachedChildrenIds(newChildren);\n      }\n    }\n  }\n  movedItems[0].getTree().rebuildTree();\n});\n\n// src/utilities/insert-items-at-target.ts\nvar insertItemsAtTarget = (itemIds, target, onChangeChildren) => __async(null, null, function* () {\n  yield target.item.getTree().waitForItemChildrenLoaded(target.item.getId());\n  const oldChildrenIds = target.item.getTree().retrieveChildrenIds(target.item.getId());\n  if (!(\"childIndex\" in target)) {\n    const newChildren2 = [...oldChildrenIds, ...itemIds];\n    yield onChangeChildren(target.item, newChildren2);\n    if (target.item && \"updateCachedChildrenIds\" in target.item) {\n      target.item.updateCachedChildrenIds(newChildren2);\n    }\n    target.item.getTree().rebuildTree();\n    return;\n  }\n  const newChildren = [\n    ...oldChildrenIds.slice(0, target.insertionIndex),\n    ...itemIds,\n    ...oldChildrenIds.slice(target.insertionIndex)\n  ];\n  yield onChangeChildren(target.item, newChildren);\n  if (target.item && \"updateCachedChildrenIds\" in target.item) {\n    target.item.updateCachedChildrenIds(newChildren);\n  }\n  target.item.getTree().rebuildTree();\n});\n\n// src/utilities/create-on-drop-handler.ts\nvar createOnDropHandler = (onChangeChildren) => (items, target) => __async(null, null, function* () {\n  const itemIds = items.map((item) => item.getId());\n  yield removeItemsFromParents(items, onChangeChildren);\n  yield insertItemsAtTarget(itemIds, target, onChangeChildren);\n});\n\n// src/core/build-proxified-instance.ts\nvar noop = () => {\n};\nvar findPrevInstanceMethod = (features, instanceType, methodKey, featureSearchIndex) => {\n  var _a;\n  for (let i = featureSearchIndex; i >= 0; i--) {\n    const feature = features[i];\n    const itemInstanceMethod = (_a = feature[instanceType]) == null ? void 0 : _a[methodKey];\n    if (itemInstanceMethod) {\n      return i;\n    }\n  }\n  return null;\n};\nvar invokeInstanceMethod = (features, instanceType, opts, methodKey, featureIndex, args) => {\n  var _a;\n  const prevIndex = findPrevInstanceMethod(\n    features,\n    instanceType,\n    methodKey,\n    featureIndex - 1\n  );\n  const itemInstanceMethod = (_a = features[featureIndex][instanceType]) == null ? void 0 : _a[methodKey];\n  return itemInstanceMethod(\n    __spreadProps(__spreadValues({}, opts), {\n      prev: prevIndex !== null ? (...newArgs) => invokeInstanceMethod(\n        features,\n        instanceType,\n        opts,\n        methodKey,\n        prevIndex,\n        newArgs\n      ) : null\n    }),\n    ...args\n  );\n};\nvar buildProxiedInstance = (features, instanceType, buildOpts) => {\n  const opts = {};\n  const item = new Proxy(\n    {},\n    {\n      has(target, key) {\n        if (typeof key === \"symbol\") {\n          return false;\n        }\n        if (key === \"toJSON\") {\n          return false;\n        }\n        const hasInstanceMethod = findPrevInstanceMethod(\n          features,\n          instanceType,\n          key,\n          features.length - 1\n        );\n        return Boolean(hasInstanceMethod);\n      },\n      get(target, key) {\n        if (typeof key === \"symbol\") {\n          return void 0;\n        }\n        if (key === \"toJSON\") {\n          return {};\n        }\n        return (...args) => {\n          const featureIndex = findPrevInstanceMethod(\n            features,\n            instanceType,\n            key,\n            features.length - 1\n          );\n          if (featureIndex === null) {\n            throw throwError(`feature missing for method ${key}`);\n          }\n          return invokeInstanceMethod(\n            features,\n            instanceType,\n            opts,\n            key,\n            featureIndex,\n            args\n          );\n        };\n      }\n    }\n  );\n  Object.assign(opts, buildOpts(item));\n  return [item, noop];\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@headless-tree/core/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@headless-tree/react/dist/chunk-FWCSY2DS.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@headless-tree/react/dist/chunk-FWCSY2DS.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __objRest: () => (/* binding */ __objRest),\n/* harmony export */   __spreadProps: () => (/* binding */ __spreadProps),\n/* harmony export */   __spreadValues: () => (/* binding */ __spreadValues)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3MtdHJlZS9yZWFjdC9kaXN0L2NodW5rLUZXQ1NZMkRTLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsNkRBQTZEO0FBQzNJO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1FIiwic291cmNlcyI6WyIvVXNlcnMvdGVyZWNhbC91aS1pbnRlcmFjaXR2ZS1sZXYxL215LWFkbWluLXByb2plY3QvdWktZXhhbXBsZS1mcm9udC9ub2RlX21vZHVsZXMvQGhlYWRsZXNzLXRyZWUvcmVhY3QvZGlzdC9jaHVuay1GV0NTWTJEUy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XG52YXIgX19nZXRPd25Qcm9wRGVzY3MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19zcHJlYWRWYWx1ZXMgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxuICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMoYikpIHtcbiAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcbiAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICAgIH1cbiAgcmV0dXJuIGE7XG59O1xudmFyIF9fc3ByZWFkUHJvcHMgPSAoYSwgYikgPT4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7XG52YXIgX19vYmpSZXN0ID0gKHNvdXJjZSwgZXhjbHVkZSkgPT4ge1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIGZvciAodmFyIHByb3AgaW4gc291cmNlKVxuICAgIGlmIChfX2hhc093blByb3AuY2FsbChzb3VyY2UsIHByb3ApICYmIGV4Y2x1ZGUuaW5kZXhPZihwcm9wKSA8IDApXG4gICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gIGlmIChzb3VyY2UgIT0gbnVsbCAmJiBfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhzb3VyY2UpKSB7XG4gICAgICBpZiAoZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMCAmJiBfX3Byb3BJc0VudW0uY2FsbChzb3VyY2UsIHByb3ApKVxuICAgICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgfVxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuZXhwb3J0IHtcbiAgX19zcHJlYWRWYWx1ZXMsXG4gIF9fc3ByZWFkUHJvcHMsXG4gIF9fb2JqUmVzdFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@headless-tree/react/dist/chunk-FWCSY2DS.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@headless-tree/react/dist/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@headless-tree/react/dist/index.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistiveTreeDescription: () => (/* binding */ AssistiveTreeDescription),\n/* harmony export */   useTree: () => (/* binding */ useTree)\n/* harmony export */ });\n/* harmony import */ var _chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-FWCSY2DS.mjs */ \"(app-pages-browser)/./node_modules/@headless-tree/react/dist/chunk-FWCSY2DS.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @headless-tree/core */ \"(app-pages-browser)/./node_modules/@headless-tree/core/dist/index.mjs\");\n\n\n// src/assistive-tree-description.tsx\n\n\nvar styles = {\n  position: \"absolute\",\n  margin: \"-1px\",\n  width: \"1px\",\n  height: \"1px\",\n  overflow: \"hidden\",\n  clip: \"rect(0 0 0 0)\"\n};\nvar getDefaultLabel = (dnd, assistiveState, hotkeys) => {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n  if (!hotkeys.startDrag) return \"\";\n  const itemNames = (_b = (_a = dnd == null ? void 0 : dnd.draggedItems) == null ? void 0 : _a.map((item) => item.getItemName()).join(\", \")) != null ? _b : \"\";\n  const position = !(dnd == null ? void 0 : dnd.dragTarget) ? \"None\" : \"childIndex\" in dnd.dragTarget ? `${dnd.dragTarget.childIndex} of ${dnd.dragTarget.item.getChildren().length} in ${dnd.dragTarget.item.getItemName()}` : `in ${dnd.dragTarget.item.getItemName()}`;\n  const navGuide = `Press ${(_c = hotkeys.dragUp) == null ? void 0 : _c.hotkey} and ${(_d = hotkeys.dragDown) == null ? void 0 : _d.hotkey} to move up or down, ${(_e = hotkeys.completeDrag) == null ? void 0 : _e.hotkey} to drop, ${(_f = hotkeys.cancelDrag) == null ? void 0 : _f.hotkey} to abort.`;\n  switch (assistiveState) {\n    case _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.Started:\n      return itemNames ? `Dragging ${itemNames}. Current position: ${position}. ${navGuide}` : `Current position: ${position}. ${navGuide}`;\n    case _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.Dragging:\n      return itemNames ? `${itemNames}, ${position}` : position;\n    case _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.Completed:\n      return `Drag completed. Press ${(_g = hotkeys.startDrag) == null ? void 0 : _g.hotkey} to move selected items`;\n    case _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.Aborted:\n      return `Drag cancelled. Press ${(_h = hotkeys.startDrag) == null ? void 0 : _h.hotkey} to move selected items`;\n    case _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.None:\n    default:\n      return `Press ${(_i = hotkeys.startDrag) == null ? void 0 : _i.hotkey} to move selected items`;\n  }\n};\nvar AssistiveTreeDescription = (_a) => {\n  var _b = _a, {\n    tree,\n    getLabel = getDefaultLabel\n  } = _b, props = (0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__objRest)(_b, [\n    \"tree\",\n    \"getLabel\"\n  ]);\n  var _a2;\n  const state = tree.getState();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"span\",\n    (0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadProps)((0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({\n      \"aria-live\": \"assertive\"\n    }, props), {\n      style: (0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)((0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({}, styles), props.style)\n    }),\n    getLabel(\n      state.dnd,\n      (_a2 = state.assistiveDndState) != null ? _a2 : _headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.AssistiveDndState.None,\n      tree.getHotkeyPresets()\n    )\n  );\n};\n\n// src/use-tree.tsx\n\n\nvar useApplyAfterMount = () => {\n  const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  const callbacks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    isMounted.current = true;\n    callbacks.current.forEach((callback) => callback());\n  }, []);\n  const apply = (callback) => {\n    if (isMounted.current) {\n      callback();\n    } else {\n      callbacks.current.push(callback);\n    }\n  };\n  return apply;\n};\nvar useTree = (config) => {\n  const apply = useApplyAfterMount();\n  const [tree] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => ({ current: (0,_headless_tree_core__WEBPACK_IMPORTED_MODULE_1__.createTree)(config) }));\n  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => tree.current.getState()\n  );\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    tree.current.rebuildTree();\n  }, [tree]);\n  tree.current.setConfig((prev) => (0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadProps)((0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)((0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({}, prev), config), {\n    state: (0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)((0,_chunk_FWCSY2DS_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({}, state), config.state),\n    setState: (state2) => {\n      apply(() => {\n        var _a;\n        setState(state2);\n        (_a = config.setState) == null ? void 0 : _a.call(config, state2);\n      });\n    }\n  }));\n  return tree.current;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3MtdHJlZS9yZWFjdC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUk4Qjs7QUFFOUI7QUFDMEI7QUFHRztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyR0FBMkcsMkJBQTJCLEtBQUssMENBQTBDLEtBQUssa0NBQWtDLFVBQVUsa0NBQWtDO0FBQ3hRLDRCQUE0QixvREFBb0QsTUFBTSxzREFBc0Qsc0JBQXNCLDBEQUEwRCxXQUFXLHdEQUF3RDtBQUMvUjtBQUNBLFNBQVMsa0VBQWlCO0FBQzFCLHFDQUFxQyxVQUFVLHNCQUFzQixTQUFTLElBQUksU0FBUyx5QkFBeUIsU0FBUyxJQUFJLFNBQVM7QUFDMUksU0FBUyxrRUFBaUI7QUFDMUIsNEJBQTRCLFVBQVUsSUFBSSxTQUFTO0FBQ25ELFNBQVMsa0VBQWlCO0FBQzFCLHNDQUFzQyx1REFBdUQ7QUFDN0YsU0FBUyxrRUFBaUI7QUFDMUIsc0NBQXNDLHVEQUF1RDtBQUM3RixTQUFTLGtFQUFpQjtBQUMxQjtBQUNBLHNCQUFzQix1REFBdUQ7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxjQUFjLDhEQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0RBQW1CO0FBQzVDO0FBQ0EsSUFBSSxrRUFBYSxDQUFDLG1FQUFjO0FBQ2hDO0FBQ0EsS0FBSztBQUNMLGFBQWEsbUVBQWMsQ0FBQyxtRUFBYyxHQUFHO0FBQzdDLEtBQUs7QUFDTDtBQUNBO0FBQ0Esc0RBQXNELGtFQUFpQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNvRDtBQUNIO0FBQ2pEO0FBQ0Esb0JBQW9CLDZDQUFNO0FBQzFCLG9CQUFvQiw2Q0FBTTtBQUMxQixFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsK0NBQVEsVUFBVSxTQUFTLCtEQUFVLFVBQVU7QUFDaEUsNEJBQTRCLCtDQUFRO0FBQ3BDO0FBQ0E7QUFDQSxFQUFFLGdEQUFTO0FBQ1g7QUFDQSxHQUFHO0FBQ0gsbUNBQW1DLGtFQUFhLENBQUMsbUVBQWMsQ0FBQyxtRUFBYyxHQUFHO0FBQ2pGLFdBQVcsbUVBQWMsQ0FBQyxtRUFBYyxHQUFHO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUlFIiwic291cmNlcyI6WyIvVXNlcnMvdGVyZWNhbC91aS1pbnRlcmFjaXR2ZS1sZXYxL215LWFkbWluLXByb2plY3QvdWktZXhhbXBsZS1mcm9udC9ub2RlX21vZHVsZXMvQGhlYWRsZXNzLXRyZWUvcmVhY3QvZGlzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgX19vYmpSZXN0LFxuICBfX3NwcmVhZFByb3BzLFxuICBfX3NwcmVhZFZhbHVlc1xufSBmcm9tIFwiLi9jaHVuay1GV0NTWTJEUy5tanNcIjtcblxuLy8gc3JjL2Fzc2lzdGl2ZS10cmVlLWRlc2NyaXB0aW9uLnRzeFxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgQXNzaXN0aXZlRG5kU3RhdGVcbn0gZnJvbSBcIkBoZWFkbGVzcy10cmVlL2NvcmVcIjtcbnZhciBzdHlsZXMgPSB7XG4gIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gIG1hcmdpbjogXCItMXB4XCIsXG4gIHdpZHRoOiBcIjFweFwiLFxuICBoZWlnaHQ6IFwiMXB4XCIsXG4gIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICBjbGlwOiBcInJlY3QoMCAwIDAgMClcIlxufTtcbnZhciBnZXREZWZhdWx0TGFiZWwgPSAoZG5kLCBhc3Npc3RpdmVTdGF0ZSwgaG90a2V5cykgPT4ge1xuICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaTtcbiAgaWYgKCFob3RrZXlzLnN0YXJ0RHJhZykgcmV0dXJuIFwiXCI7XG4gIGNvbnN0IGl0ZW1OYW1lcyA9IChfYiA9IChfYSA9IGRuZCA9PSBudWxsID8gdm9pZCAwIDogZG5kLmRyYWdnZWRJdGVtcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm1hcCgoaXRlbSkgPT4gaXRlbS5nZXRJdGVtTmFtZSgpKS5qb2luKFwiLCBcIikpICE9IG51bGwgPyBfYiA6IFwiXCI7XG4gIGNvbnN0IHBvc2l0aW9uID0gIShkbmQgPT0gbnVsbCA/IHZvaWQgMCA6IGRuZC5kcmFnVGFyZ2V0KSA/IFwiTm9uZVwiIDogXCJjaGlsZEluZGV4XCIgaW4gZG5kLmRyYWdUYXJnZXQgPyBgJHtkbmQuZHJhZ1RhcmdldC5jaGlsZEluZGV4fSBvZiAke2RuZC5kcmFnVGFyZ2V0Lml0ZW0uZ2V0Q2hpbGRyZW4oKS5sZW5ndGh9IGluICR7ZG5kLmRyYWdUYXJnZXQuaXRlbS5nZXRJdGVtTmFtZSgpfWAgOiBgaW4gJHtkbmQuZHJhZ1RhcmdldC5pdGVtLmdldEl0ZW1OYW1lKCl9YDtcbiAgY29uc3QgbmF2R3VpZGUgPSBgUHJlc3MgJHsoX2MgPSBob3RrZXlzLmRyYWdVcCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmhvdGtleX0gYW5kICR7KF9kID0gaG90a2V5cy5kcmFnRG93bikgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLmhvdGtleX0gdG8gbW92ZSB1cCBvciBkb3duLCAkeyhfZSA9IGhvdGtleXMuY29tcGxldGVEcmFnKSA9PSBudWxsID8gdm9pZCAwIDogX2UuaG90a2V5fSB0byBkcm9wLCAkeyhfZiA9IGhvdGtleXMuY2FuY2VsRHJhZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLmhvdGtleX0gdG8gYWJvcnQuYDtcbiAgc3dpdGNoIChhc3Npc3RpdmVTdGF0ZSkge1xuICAgIGNhc2UgQXNzaXN0aXZlRG5kU3RhdGUuU3RhcnRlZDpcbiAgICAgIHJldHVybiBpdGVtTmFtZXMgPyBgRHJhZ2dpbmcgJHtpdGVtTmFtZXN9LiBDdXJyZW50IHBvc2l0aW9uOiAke3Bvc2l0aW9ufS4gJHtuYXZHdWlkZX1gIDogYEN1cnJlbnQgcG9zaXRpb246ICR7cG9zaXRpb259LiAke25hdkd1aWRlfWA7XG4gICAgY2FzZSBBc3Npc3RpdmVEbmRTdGF0ZS5EcmFnZ2luZzpcbiAgICAgIHJldHVybiBpdGVtTmFtZXMgPyBgJHtpdGVtTmFtZXN9LCAke3Bvc2l0aW9ufWAgOiBwb3NpdGlvbjtcbiAgICBjYXNlIEFzc2lzdGl2ZURuZFN0YXRlLkNvbXBsZXRlZDpcbiAgICAgIHJldHVybiBgRHJhZyBjb21wbGV0ZWQuIFByZXNzICR7KF9nID0gaG90a2V5cy5zdGFydERyYWcpID09IG51bGwgPyB2b2lkIDAgOiBfZy5ob3RrZXl9IHRvIG1vdmUgc2VsZWN0ZWQgaXRlbXNgO1xuICAgIGNhc2UgQXNzaXN0aXZlRG5kU3RhdGUuQWJvcnRlZDpcbiAgICAgIHJldHVybiBgRHJhZyBjYW5jZWxsZWQuIFByZXNzICR7KF9oID0gaG90a2V5cy5zdGFydERyYWcpID09IG51bGwgPyB2b2lkIDAgOiBfaC5ob3RrZXl9IHRvIG1vdmUgc2VsZWN0ZWQgaXRlbXNgO1xuICAgIGNhc2UgQXNzaXN0aXZlRG5kU3RhdGUuTm9uZTpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGBQcmVzcyAkeyhfaSA9IGhvdGtleXMuc3RhcnREcmFnKSA9PSBudWxsID8gdm9pZCAwIDogX2kuaG90a2V5fSB0byBtb3ZlIHNlbGVjdGVkIGl0ZW1zYDtcbiAgfVxufTtcbnZhciBBc3Npc3RpdmVUcmVlRGVzY3JpcHRpb24gPSAoX2EpID0+IHtcbiAgdmFyIF9iID0gX2EsIHtcbiAgICB0cmVlLFxuICAgIGdldExhYmVsID0gZ2V0RGVmYXVsdExhYmVsXG4gIH0gPSBfYiwgcHJvcHMgPSBfX29ialJlc3QoX2IsIFtcbiAgICBcInRyZWVcIixcbiAgICBcImdldExhYmVsXCJcbiAgXSk7XG4gIHZhciBfYTI7XG4gIGNvbnN0IHN0YXRlID0gdHJlZS5nZXRTdGF0ZSgpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgXCJzcGFuXCIsXG4gICAgX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7XG4gICAgICBcImFyaWEtbGl2ZVwiOiBcImFzc2VydGl2ZVwiXG4gICAgfSwgcHJvcHMpLCB7XG4gICAgICBzdHlsZTogX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIHN0eWxlcyksIHByb3BzLnN0eWxlKVxuICAgIH0pLFxuICAgIGdldExhYmVsKFxuICAgICAgc3RhdGUuZG5kLFxuICAgICAgKF9hMiA9IHN0YXRlLmFzc2lzdGl2ZURuZFN0YXRlKSAhPSBudWxsID8gX2EyIDogQXNzaXN0aXZlRG5kU3RhdGUuTm9uZSxcbiAgICAgIHRyZWUuZ2V0SG90a2V5UHJlc2V0cygpXG4gICAgKVxuICApO1xufTtcblxuLy8gc3JjL3VzZS10cmVlLnRzeFxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjcmVhdGVUcmVlIH0gZnJvbSBcIkBoZWFkbGVzcy10cmVlL2NvcmVcIjtcbnZhciB1c2VBcHBseUFmdGVyTW91bnQgPSAoKSA9PiB7XG4gIGNvbnN0IGlzTW91bnRlZCA9IHVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IGNhbGxiYWNrcyA9IHVzZVJlZihbXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgIGNhbGxiYWNrcy5jdXJyZW50LmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjaygpKTtcbiAgfSwgW10pO1xuICBjb25zdCBhcHBseSA9IChjYWxsYmFjaykgPT4ge1xuICAgIGlmIChpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2tzLmN1cnJlbnQucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gYXBwbHk7XG59O1xudmFyIHVzZVRyZWUgPSAoY29uZmlnKSA9PiB7XG4gIGNvbnN0IGFwcGx5ID0gdXNlQXBwbHlBZnRlck1vdW50KCk7XG4gIGNvbnN0IFt0cmVlXSA9IHVzZVN0YXRlKCgpID0+ICh7IGN1cnJlbnQ6IGNyZWF0ZVRyZWUoY29uZmlnKSB9KSk7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoXG4gICAgKCkgPT4gdHJlZS5jdXJyZW50LmdldFN0YXRlKClcbiAgKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB0cmVlLmN1cnJlbnQucmVidWlsZFRyZWUoKTtcbiAgfSwgW3RyZWVdKTtcbiAgdHJlZS5jdXJyZW50LnNldENvbmZpZygocHJldikgPT4gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgcHJldiksIGNvbmZpZyksIHtcbiAgICBzdGF0ZTogX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIHN0YXRlKSwgY29uZmlnLnN0YXRlKSxcbiAgICBzZXRTdGF0ZTogKHN0YXRlMikgPT4ge1xuICAgICAgYXBwbHkoKCkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHNldFN0YXRlKHN0YXRlMik7XG4gICAgICAgIChfYSA9IGNvbmZpZy5zZXRTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmNhbGwoY29uZmlnLCBzdGF0ZTIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KSk7XG4gIHJldHVybiB0cmVlLmN1cnJlbnQ7XG59O1xuZXhwb3J0IHtcbiAgQXNzaXN0aXZlVHJlZURlc2NyaXB0aW9uLFxuICB1c2VUcmVlXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@headless-tree/react/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fterecal%2Fui-interacitve-lev1%2Fmy-admin-project%2Fui-example-front%2Fsrc%2Fapp%2Fheadless-tree%2Flevel-1%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fterecal%2Fui-interacitve-lev1%2Fmy-admin-project%2Fui-example-front%2Fsrc%2Fapp%2Fheadless-tree%2Flevel-1%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/headless-tree/level-1/page.tsx */ \"(app-pages-browser)/./src/app/headless-tree/level-1/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZ0ZXJlY2FsJTJGdWktaW50ZXJhY2l0dmUtbGV2MSUyRm15LWFkbWluLXByb2plY3QlMkZ1aS1leGFtcGxlLWZyb250JTJGc3JjJTJGYXBwJTJGaGVhZGxlc3MtdHJlZSUyRmxldmVsLTElMkZwYWdlLnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLDBNQUFnSiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL3RlcmVjYWwvdWktaW50ZXJhY2l0dmUtbGV2MS9teS1hZG1pbi1wcm9qZWN0L3VpLWV4YW1wbGUtZnJvbnQvc3JjL2FwcC9oZWFkbGVzcy10cmVlL2xldmVsLTEvcGFnZS50c3hcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fterecal%2Fui-interacitve-lev1%2Fmy-admin-project%2Fui-example-front%2Fsrc%2Fapp%2Fheadless-tree%2Flevel-1%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n        case REACT_ACTIVITY_TYPE:\n          return \"Activity\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_PORTAL_TYPE:\n            return \"Portal\";\n          case REACT_CONTEXT_TYPE:\n            return type.displayName || \"Context\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function UnknownOwner() {\n      return Error(\"react-stack-top-frame\");\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(type, key, props, owner, debugStack, debugTask) {\n      var refProp = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== refProp ? refProp : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        maybeKey,\n        getOwner(),\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\"),\n      REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray,\n      createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          };\n    React = {\n      react_stack_bottom_frame: function (callStackForError) {\n        return callStackForError();\n      }\n    };\n    var specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(\n      React,\n      UnknownOwner\n    )();\n    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (type, config, maybeKey, isStaticChildren) {\n      var trackActualOwner =\n        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        isStaticChildren,\n        trackActualOwner\n          ? Error(\"react-stack-top-frame\")\n          : unknownOwnerDebugStack,\n        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n      );\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIi9Vc2Vycy90ZXJlY2FsL3VpLWludGVyYWNpdHZlLWxldjEvbXktYWRtaW4tcHJvamVjdC91aS1leGFtcGxlLWZyb250L25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/headless-tree/level-1/page.tsx":
/*!************************************************!*\
  !*** ./src/app/headless-tree/level-1/page.tsx ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HeadlessTreeLevel1)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _headless_tree_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @headless-tree/react */ \"(app-pages-browser)/./node_modules/@headless-tree/react/dist/index.mjs\");\n/* harmony import */ var _headless_tree_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @headless-tree/core */ \"(app-pages-browser)/./node_modules/@headless-tree/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\nconst initialTreeData = {\n    \"package.json\": {\n        \"//\": \"...\"\n    },\n    src: {\n        \"App.tsx\": {\n            \"//\": \"...\"\n        },\n        \"index.ts\": {\n            \"//\": \"...\"\n        },\n        components: {\n            \"Button.tsx\": {\n                \"//\": \"...\"\n            },\n            \"Modal.tsx\": {\n                \"//\": \"...\"\n            }\n        }\n    }\n};\n// Helper functions to work with tree data\nconst getItemFromPath = (data, path)=>{\n    const parts = path.split('/').filter(Boolean);\n    let current = data;\n    let name = path;\n    for (const part of parts){\n        if (current && typeof current === 'object' && current[part] !== undefined) {\n            current = current[part];\n            name = part;\n        } else {\n            return null;\n        }\n    }\n    return {\n        name,\n        isFolder: current && typeof current === 'object' && !current.hasOwnProperty('//')\n    };\n};\nconst getChildrenFromPath = (data, path)=>{\n    if (!path) return Object.keys(data);\n    const parts = path.split('/').filter(Boolean);\n    let current = data;\n    for (const part of parts){\n        if (current && typeof current === 'object' && current[part] !== undefined) {\n            current = current[part];\n        } else {\n            return [];\n        }\n    }\n    if (current && typeof current === 'object' && !current.hasOwnProperty('//')) {\n        return Object.keys(current).map((key)=>path ? \"\".concat(path, \"/\").concat(key) : key);\n    }\n    return [];\n};\n// The TreeItem component\nconst TreeItem = (param)=>{\n    let { item } = param;\n    const isExpanded = item.isExpanded();\n    const isFolder = item.isFolder();\n    const isSelected = item.isSelected();\n    const itemData = getItemFromPath(initialTreeData, item.getItemData());\n    const label = (itemData === null || itemData === void 0 ? void 0 : itemData.name) || item.getItemData();\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ...item.getProps(),\n        style: {\n            paddingLeft: \"\".concat(item.getItemMeta().level * 20, \"px\")\n        },\n        className: \"flex items-center space-x-2 cursor-pointer hover:bg-slate-100 rounded-md p-1 \".concat(isSelected ? \"bg-blue-100\" : \"\"),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                children: isFolder ? isExpanded ? \"📂\" : \"📁\" : \"📄\"\n            }, void 0, false, {\n                fileName: \"/Users/terecal/ui-interacitve-lev1/my-admin-project/ui-example-front/src/app/headless-tree/level-1/page.tsx\",\n                lineNumber: 76,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                children: label\n            }, void 0, false, {\n                fileName: \"/Users/terecal/ui-interacitve-lev1/my-admin-project/ui-example-front/src/app/headless-tree/level-1/page.tsx\",\n                lineNumber: 77,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/terecal/ui-interacitve-lev1/my-admin-project/ui-example-front/src/app/headless-tree/level-1/page.tsx\",\n        lineNumber: 71,\n        columnNumber: 5\n    }, undefined);\n};\n_c = TreeItem;\nfunction HeadlessTreeLevel1() {\n    _s();\n    // The main tree controller\n    const tree = (0,_headless_tree_react__WEBPACK_IMPORTED_MODULE_2__.useTree)({\n        rootItemId: \"\",\n        getItemName: {\n            \"HeadlessTreeLevel1.useTree[tree]\": (item)=>{\n                const itemData = getItemFromPath(initialTreeData, item.getItemData());\n                return (itemData === null || itemData === void 0 ? void 0 : itemData.name) || item.getItemData();\n            }\n        }[\"HeadlessTreeLevel1.useTree[tree]\"],\n        isItemFolder: {\n            \"HeadlessTreeLevel1.useTree[tree]\": (item)=>{\n                const itemData = getItemFromPath(initialTreeData, item.getItemData());\n                return (itemData === null || itemData === void 0 ? void 0 : itemData.isFolder) || false;\n            }\n        }[\"HeadlessTreeLevel1.useTree[tree]\"],\n        dataLoader: {\n            getItem: {\n                \"HeadlessTreeLevel1.useTree[tree]\": (itemId)=>itemId\n            }[\"HeadlessTreeLevel1.useTree[tree]\"],\n            getChildren: {\n                \"HeadlessTreeLevel1.useTree[tree]\": (itemId)=>getChildrenFromPath(initialTreeData, itemId)\n            }[\"HeadlessTreeLevel1.useTree[tree]\"]\n        },\n        features: [\n            _headless_tree_core__WEBPACK_IMPORTED_MODULE_3__.syncDataLoaderFeature,\n            _headless_tree_core__WEBPACK_IMPORTED_MODULE_3__.selectionFeature,\n            _headless_tree_core__WEBPACK_IMPORTED_MODULE_3__.hotkeysCoreFeature\n        ],\n        initialState: {\n            expandedItems: [\n                \"src\"\n            ]\n        }\n    });\n    // Get all items for rendering\n    const items = tree.getItems();\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"container mx-auto py-10\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"max-w-md mx-auto\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                    className: \"text-4xl font-bold mb-6 text-center\",\n                    children: \"Headless Tree - Level 1\"\n                }, void 0, false, {\n                    fileName: \"/Users/terecal/ui-interacitve-lev1/my-admin-project/ui-example-front/src/app/headless-tree/level-1/page.tsx\",\n                    lineNumber: 110,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-muted-foreground text-center mb-8\",\n                    children: \"Basic file explorer tree implementation. Click on folders to expand and collapse them.\"\n                }, void 0, false, {\n                    fileName: \"/Users/terecal/ui-interacitve-lev1/my-admin-project/ui-example-front/src/app/headless-tree/level-1/page.tsx\",\n                    lineNumber: 113,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    ...tree.getContainerProps(),\n                    className: \"p-4 bg-white border rounded-lg\",\n                    children: items.map((item)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TreeItem, {\n                            item: item\n                        }, item.getId(), false, {\n                            fileName: \"/Users/terecal/ui-interacitve-lev1/my-admin-project/ui-example-front/src/app/headless-tree/level-1/page.tsx\",\n                            lineNumber: 118,\n                            columnNumber: 13\n                        }, this))\n                }, void 0, false, {\n                    fileName: \"/Users/terecal/ui-interacitve-lev1/my-admin-project/ui-example-front/src/app/headless-tree/level-1/page.tsx\",\n                    lineNumber: 116,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/terecal/ui-interacitve-lev1/my-admin-project/ui-example-front/src/app/headless-tree/level-1/page.tsx\",\n            lineNumber: 109,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/terecal/ui-interacitve-lev1/my-admin-project/ui-example-front/src/app/headless-tree/level-1/page.tsx\",\n        lineNumber: 108,\n        columnNumber: 5\n    }, this);\n}\n_s(HeadlessTreeLevel1, \"ior+FCT7IEVtSaa3nesd5tl0ans=\", false, function() {\n    return [\n        _headless_tree_react__WEBPACK_IMPORTED_MODULE_2__.useTree\n    ];\n});\n_c1 = HeadlessTreeLevel1;\nvar _c, _c1;\n$RefreshReg$(_c, \"TreeItem\");\n$RefreshReg$(_c1, \"HeadlessTreeLevel1\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/headless-tree/level-1/page.tsx\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fterecal%2Fui-interacitve-lev1%2Fmy-admin-project%2Fui-example-front%2Fsrc%2Fapp%2Fheadless-tree%2Flevel-1%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);